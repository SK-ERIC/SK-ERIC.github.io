<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ERIC 博客</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>每一个你讨厌的现在，都有一个不够努力的曾经。</description>
    <pubDate>Wed, 01 Dec 2021 11:45:25 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>input上传重复文件异常问题</title>
      <link>http://example.com/2021/12/01/input%E4%B8%8A%E4%BC%A0%E9%87%8D%E5%A4%8D%E6%96%87%E4%BB%B6%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/</link>
      <guid>http://example.com/2021/12/01/input%E4%B8%8A%E4%BC%A0%E9%87%8D%E5%A4%8D%E6%96%87%E4%BB%B6%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/</guid>
      <pubDate>Wed, 01 Dec 2021 11:45:25 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;input-type-39-file-39-连续上传同一个文件不触发-onChange-事件-或-Upload-组件只调用了一次-onChange-函数&quot;&gt;&lt;a href=&quot;#input-type-39-file-39-连续上传同一个文件不触发-onChange-事件-或-Upload-组件只调用了一次-onChange-函数&quot; class=&quot;headerlink&quot; title=&quot;input[type=&amp;#39;file&amp;#39;] 连续上传同一个文件不触发 onChange 事件 或 Upload 组件只调用了一次 onChange 函数&quot;&gt;&lt;/a&gt;&lt;code&gt;input[type=&amp;#39;file&amp;#39;]&lt;/code&gt; 连续上传同一个文件不触发 &lt;code&gt;onChange&lt;/code&gt; 事件 或 Upload 组件只调用了一次 &lt;code&gt;onChange&lt;/code&gt; 函数&lt;/h1&gt;&lt;p&gt;原因为 &lt;code&gt;onChange&lt;/code&gt; 的触发条件是 &lt;code&gt;value&lt;/code&gt;的变化。当我们选取文件上传后，&lt;code&gt;value&lt;/code&gt;的值为该文件在磁盘中的地址。如：&lt;code&gt;D:\test\1.docx&lt;/code&gt; 。因此，我们改变&lt;code&gt;value&lt;/code&gt;值即可。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="input-type-39-file-39-连续上传同一个文件不触发-onChange-事件-或-Upload-组件只调用了一次-onChange-函数"><a href="#input-type-39-file-39-连续上传同一个文件不触发-onChange-事件-或-Upload-组件只调用了一次-onChange-函数" class="headerlink" title="input[type=&#39;file&#39;] 连续上传同一个文件不触发 onChange 事件 或 Upload 组件只调用了一次 onChange 函数"></a><code>input[type=&#39;file&#39;]</code> 连续上传同一个文件不触发 <code>onChange</code> 事件 或 Upload 组件只调用了一次 <code>onChange</code> 函数</h1><p>原因为 <code>onChange</code> 的触发条件是 <code>value</code>的变化。当我们选取文件上传后，<code>value</code>的值为该文件在磁盘中的地址。如：<code>D:\test\1.docx</code> 。因此，我们改变<code>value</code>值即可。</p><span id="more"></span><h2 id="背景一：原生input"><a href="#背景一：原生input" class="headerlink" title="背景一：原生input"></a>背景一：原生<code>input</code></h2><p>如果使用的是原生<code>input</code>标签，只需在点击事件的时候置空<code>value</code>值即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;input</span><br><span class="line">  type=&quot;file&quot;</span><br><span class="line">  accept=&quot;.docx&quot;</span><br><span class="line">  onClick=&#123;(e) =&gt; &#123;</span><br><span class="line">    (e.target as HTMLInputElement).value = &quot;&quot;;</span><br><span class="line">  &#125;&#125;</span><br><span class="line">  onChange=&#123;(e) =&gt; &#123;</span><br><span class="line">    console.log(`e`, e.target.files);</span><br><span class="line">  &#125;&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h2 id="背景二：采用了Antd的Input组件上传file"><a href="#背景二：采用了Antd的Input组件上传file" class="headerlink" title="背景二：采用了Antd的Input组件上传file"></a>背景二：采用了<code>Antd</code>的<code>Input</code>组件上传<code>file</code></h2><p>此时不能直接的使用背景一的方法去改变<code>value</code>，否则你会得到以下信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Uncaught DOMException: Failed to set the &#x27;value&#x27; property on &#x27;HTMLInputElement&#x27;: This input element accepts a filename, which may only be programmatically set to the empty string.</span><br></pre></td></tr></table></figure><blockquote><p>翻译为：无法在“<code>HTMLInputElement</code>”上设置“<code>value</code>”属性：此输入元素接受文件名，该文件名只能以编程方式设置为空字符串。</p></blockquote><p>这对于文件输入无效，因为浏览器只允许读取而不是写入输入。</p><p>可调用<code>Input</code>身上的<code>setValue(value: string, callback?: () =&gt; void): void</code>方法，即可解决。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const uploadIptRef = useRef&lt;Input&gt;(null);</span><br><span class="line">&lt;Input</span><br><span class="line">  ref=&#123;uploadIptRef&#125;</span><br><span class="line">  type=&quot;file&quot;</span><br><span class="line">  accept=&quot;.docx&quot;</span><br><span class="line">  onClick=&#123;(e) =&gt; &#123;</span><br><span class="line">    uploadIptRef.current?.setValue(&quot;&quot;);</span><br><span class="line">  &#125;&#125;</span><br><span class="line">  onChange=&#123;(e) =&gt; &#123;</span><br><span class="line">    console.log(`e`, e.target.files);</span><br><span class="line">  &#125;&#125;</span><br><span class="line">/&gt;;</span><br></pre></td></tr></table></figure><h3 id="setValue在ant-design-components-input-Input-tsx中表现为"><a href="#setValue在ant-design-components-input-Input-tsx中表现为" class="headerlink" title="setValue在ant-design\components\input\Input.tsx中表现为"></a><code>setValue</code>在<code>ant-design\components\input\Input.tsx</code>中表现为</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setValue</span>(<span class="params">value: <span class="built_in">string</span>, callback?: () =&gt; <span class="built_in">void</span></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.props.value === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123; value &#125;, callback);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        callback?.();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>渲染组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">renderComponent = (&#123; getPrefixCls, direction, input &#125;: ConfigConsumerProps) =&gt; &#123;</span><br><span class="line">  const &#123; value, focused &#125; = this.state;</span><br><span class="line">  const &#123; prefixCls: customizePrefixCls, bordered = true &#125; = this.props;</span><br><span class="line">  const prefixCls = getPrefixCls(&quot;input&quot;, customizePrefixCls);</span><br><span class="line">  this.direction = direction;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;SizeContext.Consumer&gt;</span><br><span class="line">      &#123;(size) =&gt; (</span><br><span class="line">        &lt;ClearableLabeledInput</span><br><span class="line">          size=&#123;size&#125;</span><br><span class="line">          &#123;...this.props&#125;</span><br><span class="line">          prefixCls=&#123;prefixCls&#125;</span><br><span class="line">          inputType=&quot;input&quot;</span><br><span class="line">          value=&#123;fixControlledValue(value)&#125;</span><br><span class="line">          element=&#123;this.renderInput(prefixCls, size, bordered, input)&#125;</span><br><span class="line">          handleReset=&#123;this.handleReset&#125;</span><br><span class="line">          ref=&#123;this.saveClearableInput&#125;</span><br><span class="line">          direction=&#123;direction&#125;</span><br><span class="line">          focused=&#123;focused&#125;</span><br><span class="line">          triggerFocus=&#123;this.focus&#125;</span><br><span class="line">          bordered=&#123;bordered&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      )&#125;</span><br><span class="line">    &lt;/SizeContext.Consumer&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="背景三：采用了Ant-design的Upload组件，遇到onChange只调用一次问题"><a href="#背景三：采用了Ant-design的Upload组件，遇到onChange只调用一次问题" class="headerlink" title="背景三：采用了Ant design的Upload组件，遇到onChange只调用一次问题"></a>背景三：采用了<code>Ant design</code>的<code>Upload</code>组件，遇到<code>onChange</code>只调用一次问题</h2><p>可参考 <a href="https://github.com/ant-design/ant-design/issues/2423">#2423</a></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%89%8D%E7%AB%AF/">前端</category>
      
      
      <category domain="http://example.com/tags/BUG/">BUG</category>
      
      
      <comments>http://example.com/2021/12/01/input%E4%B8%8A%E4%BC%A0%E9%87%8D%E5%A4%8D%E6%96%87%E4%BB%B6%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ASCII对照表</title>
      <link>http://example.com/2021/12/01/ASCII%E5%AF%B9%E7%85%A7%E8%A1%A8/</link>
      <guid>http://example.com/2021/12/01/ASCII%E5%AF%B9%E7%85%A7%E8%A1%A8/</guid>
      <pubDate>Wed, 01 Dec 2021 11:44:31 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;ASCII-对照表&quot;&gt;&lt;a href=&quot;#ASCII-对照表&quot; class=&quot;headerlink&quot; title=&quot;ASCII 对照表&quot;&gt;&lt;/a&gt;ASCII 对照表&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;ASCII 值&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;控制字符&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;ASCII 值&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;控制字符&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;ASCII 值&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;控制字符&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;ASCII 值&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;控制字符&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;0&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;NUT&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;32&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;(space)&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;64&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;@&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;96&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;、&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;SOH&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;33&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;!&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;65&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;A&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;97&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;2&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;STX&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;34&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;“&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;66&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;B&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;98&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;b&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;3&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;ETX&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;35&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;#&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;67&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;C&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;99&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;c&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;4&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;EOT&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;36&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;$&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;68&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;D&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;100&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;d&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;5&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;ENQ&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;37&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;%&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;69&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;E&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;101&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;e&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;6&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;ACK&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;38&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&amp;amp;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;70&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;F&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;102&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;f&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;7&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;BEL&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;39&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;,&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;71&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;G&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;103&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;g&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;8&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;BS&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;40&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;(&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;72&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;H&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;104&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;9&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;HT&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;41&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;)&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;73&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;I&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;105&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;i&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;10&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;LF&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;42&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;*&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;74&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;J&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;106&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;j&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;11&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;VT&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;43&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;+&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;75&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;K&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;107&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;k&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;12&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;FF&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;44&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;,&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;76&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;L&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;108&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;l&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;13&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;CR&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;45&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;77&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;M&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;109&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;m&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;14&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;SO&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;46&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;.&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;78&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;N&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;110&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;n&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;15&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;SI&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;47&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;/&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;79&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;O&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;111&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;o&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;16&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;DLE&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;48&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;0&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;80&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;P&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;112&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;p&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;17&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;DCI&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;49&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;81&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Q&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;113&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;q&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;18&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;DC2&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;50&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;2&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;82&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;R&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;114&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;r&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;19&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;DC3&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;51&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;3&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;83&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;S&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;115&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;20&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;DC4&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;52&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;4&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;84&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;T&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;116&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;t&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;21&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;NAK&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;53&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;5&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;85&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;U&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;117&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;u&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;22&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;SYN&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;54&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;6&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;86&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;V&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;118&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;v&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;23&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;TB&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;55&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;7&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;87&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;W&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;119&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;w&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;24&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;CAN&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;56&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;8&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;88&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;X&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;120&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;25&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;EM&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;57&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;9&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;89&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Y&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;121&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;26&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;SUB&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;58&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;:&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;90&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Z&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;122&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;z&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;27&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;ESC&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;59&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;91&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;[&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;123&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;{&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;28&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;FS&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;60&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&amp;lt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;92&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;/&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;124&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;|&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;29&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;GS&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;61&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;=&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;93&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;]&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;125&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;30&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;RS&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;62&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&amp;gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;94&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;^&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;126&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;`&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;31&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;US&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;63&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;?&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;95&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;_&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;127&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;DEL&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="ASCII-对照表"><a href="#ASCII-对照表" class="headerlink" title="ASCII 对照表"></a>ASCII 对照表</h1><table><thead><tr><th align="left">ASCII 值</th><th align="left">控制字符</th><th align="left">ASCII 值</th><th align="left">控制字符</th><th align="left">ASCII 值</th><th align="left">控制字符</th><th align="left">ASCII 值</th><th align="left">控制字符</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">NUT</td><td align="left">32</td><td align="left">(space)</td><td align="left">64</td><td align="left">@</td><td align="left">96</td><td align="left">、</td></tr><tr><td align="left">1</td><td align="left">SOH</td><td align="left">33</td><td align="left">!</td><td align="left">65</td><td align="left">A</td><td align="left">97</td><td align="left">a</td></tr><tr><td align="left">2</td><td align="left">STX</td><td align="left">34</td><td align="left">“</td><td align="left">66</td><td align="left">B</td><td align="left">98</td><td align="left">b</td></tr><tr><td align="left">3</td><td align="left">ETX</td><td align="left">35</td><td align="left">#</td><td align="left">67</td><td align="left">C</td><td align="left">99</td><td align="left">c</td></tr><tr><td align="left">4</td><td align="left">EOT</td><td align="left">36</td><td align="left">$</td><td align="left">68</td><td align="left">D</td><td align="left">100</td><td align="left">d</td></tr><tr><td align="left">5</td><td align="left">ENQ</td><td align="left">37</td><td align="left">%</td><td align="left">69</td><td align="left">E</td><td align="left">101</td><td align="left">e</td></tr><tr><td align="left">6</td><td align="left">ACK</td><td align="left">38</td><td align="left">&amp;</td><td align="left">70</td><td align="left">F</td><td align="left">102</td><td align="left">f</td></tr><tr><td align="left">7</td><td align="left">BEL</td><td align="left">39</td><td align="left">,</td><td align="left">71</td><td align="left">G</td><td align="left">103</td><td align="left">g</td></tr><tr><td align="left">8</td><td align="left">BS</td><td align="left">40</td><td align="left">(</td><td align="left">72</td><td align="left">H</td><td align="left">104</td><td align="left">h</td></tr><tr><td align="left">9</td><td align="left">HT</td><td align="left">41</td><td align="left">)</td><td align="left">73</td><td align="left">I</td><td align="left">105</td><td align="left">i</td></tr><tr><td align="left">10</td><td align="left">LF</td><td align="left">42</td><td align="left">*</td><td align="left">74</td><td align="left">J</td><td align="left">106</td><td align="left">j</td></tr><tr><td align="left">11</td><td align="left">VT</td><td align="left">43</td><td align="left">+</td><td align="left">75</td><td align="left">K</td><td align="left">107</td><td align="left">k</td></tr><tr><td align="left">12</td><td align="left">FF</td><td align="left">44</td><td align="left">,</td><td align="left">76</td><td align="left">L</td><td align="left">108</td><td align="left">l</td></tr><tr><td align="left">13</td><td align="left">CR</td><td align="left">45</td><td align="left">-</td><td align="left">77</td><td align="left">M</td><td align="left">109</td><td align="left">m</td></tr><tr><td align="left">14</td><td align="left">SO</td><td align="left">46</td><td align="left">.</td><td align="left">78</td><td align="left">N</td><td align="left">110</td><td align="left">n</td></tr><tr><td align="left">15</td><td align="left">SI</td><td align="left">47</td><td align="left">/</td><td align="left">79</td><td align="left">O</td><td align="left">111</td><td align="left">o</td></tr><tr><td align="left">16</td><td align="left">DLE</td><td align="left">48</td><td align="left">0</td><td align="left">80</td><td align="left">P</td><td align="left">112</td><td align="left">p</td></tr><tr><td align="left">17</td><td align="left">DCI</td><td align="left">49</td><td align="left">1</td><td align="left">81</td><td align="left">Q</td><td align="left">113</td><td align="left">q</td></tr><tr><td align="left">18</td><td align="left">DC2</td><td align="left">50</td><td align="left">2</td><td align="left">82</td><td align="left">R</td><td align="left">114</td><td align="left">r</td></tr><tr><td align="left">19</td><td align="left">DC3</td><td align="left">51</td><td align="left">3</td><td align="left">83</td><td align="left">S</td><td align="left">115</td><td align="left">s</td></tr><tr><td align="left">20</td><td align="left">DC4</td><td align="left">52</td><td align="left">4</td><td align="left">84</td><td align="left">T</td><td align="left">116</td><td align="left">t</td></tr><tr><td align="left">21</td><td align="left">NAK</td><td align="left">53</td><td align="left">5</td><td align="left">85</td><td align="left">U</td><td align="left">117</td><td align="left">u</td></tr><tr><td align="left">22</td><td align="left">SYN</td><td align="left">54</td><td align="left">6</td><td align="left">86</td><td align="left">V</td><td align="left">118</td><td align="left">v</td></tr><tr><td align="left">23</td><td align="left">TB</td><td align="left">55</td><td align="left">7</td><td align="left">87</td><td align="left">W</td><td align="left">119</td><td align="left">w</td></tr><tr><td align="left">24</td><td align="left">CAN</td><td align="left">56</td><td align="left">8</td><td align="left">88</td><td align="left">X</td><td align="left">120</td><td align="left">x</td></tr><tr><td align="left">25</td><td align="left">EM</td><td align="left">57</td><td align="left">9</td><td align="left">89</td><td align="left">Y</td><td align="left">121</td><td align="left">y</td></tr><tr><td align="left">26</td><td align="left">SUB</td><td align="left">58</td><td align="left">:</td><td align="left">90</td><td align="left">Z</td><td align="left">122</td><td align="left">z</td></tr><tr><td align="left">27</td><td align="left">ESC</td><td align="left">59</td><td align="left">;</td><td align="left">91</td><td align="left">[</td><td align="left">123</td><td align="left">{</td></tr><tr><td align="left">28</td><td align="left">FS</td><td align="left">60</td><td align="left">&lt;</td><td align="left">92</td><td align="left">/</td><td align="left">124</td><td align="left">|</td></tr><tr><td align="left">29</td><td align="left">GS</td><td align="left">61</td><td align="left">=</td><td align="left">93</td><td align="left">]</td><td align="left">125</td><td align="left">}</td></tr><tr><td align="left">30</td><td align="left">RS</td><td align="left">62</td><td align="left">&gt;</td><td align="left">94</td><td align="left">^</td><td align="left">126</td><td align="left">`</td></tr><tr><td align="left">31</td><td align="left">US</td><td align="left">63</td><td align="left">?</td><td align="left">95</td><td align="left">_</td><td align="left">127</td><td align="left">DEL</td></tr></tbody></table><span id="more"></span><h2 id="特殊字符解释"><a href="#特殊字符解释" class="headerlink" title="特殊字符解释"></a>特殊字符解释</h2><table><thead><tr><th>NUL 空</th><th>VT 垂直制表</th><th>SYN 空转同步</th></tr></thead><tbody><tr><td>STX 正文开始</td><td>CR 回车</td><td>CAN 作废</td></tr><tr><td>ETX 正文结束</td><td>SO 移位输出</td><td>EM 纸尽</td></tr><tr><td>EOY 传输结束</td><td>SI 移位输入</td><td>SUB 换置</td></tr><tr><td>ENQ 询问字符</td><td>DLE 空格</td><td>ESC 换码</td></tr><tr><td>ACK 承认</td><td>DC1 设备控制 1</td><td>FS 文字分隔符</td></tr><tr><td>BEL 报警</td><td>DC2 设备控制 2</td><td>GS 组分隔符</td></tr><tr><td>BS 退一格</td><td>DC3 设备控制 3</td><td>RS 记录分隔符</td></tr><tr><td>HT 横向列表</td><td>DC4 设备控制 4</td><td>US 单元分隔符</td></tr><tr><td>LF 换行</td><td>NAK 否定</td><td>DEL 删除</td></tr></tbody></table>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E8%B5%84%E6%BA%90/">资源</category>
      
      
      <category domain="http://example.com/tags/%E8%B5%84%E6%BA%90/">资源</category>
      
      
      <comments>http://example.com/2021/12/01/ASCII%E5%AF%B9%E7%85%A7%E8%A1%A8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>移动端1px问题</title>
      <link>http://example.com/2021/12/01/%E7%A7%BB%E5%8A%A8%E7%AB%AF1px%E9%97%AE%E9%A2%98/</link>
      <guid>http://example.com/2021/12/01/%E7%A7%BB%E5%8A%A8%E7%AB%AF1px%E9%97%AE%E9%A2%98/</guid>
      <pubDate>Wed, 01 Dec 2021 11:32:33 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;移动端-1px-问题解决方案&quot;&gt;&lt;a href=&quot;#移动端-1px-问题解决方案&quot; class=&quot;headerlink&quot; title=&quot;移动端 1px 问题解决方案&quot;&gt;&lt;/a&gt;移动端 1px 问题解决方案&lt;/h1&gt;&lt;p&gt;在移动端 web 开发中，UI 设计稿中设置边框为 1 像素，前端在开发过程中如果出现 border:1px，测试会发现在 retina 屏机型中，1px 会比较粗，即经典的移动端 1px 像素问题。&lt;/p&gt;
&lt;p&gt;1px 问题在实际面试中，尤其是大厂面试中出现的频率是比较高的。本文就探讨几种 1px 问题解决方案。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="移动端-1px-问题解决方案"><a href="#移动端-1px-问题解决方案" class="headerlink" title="移动端 1px 问题解决方案"></a>移动端 1px 问题解决方案</h1><p>在移动端 web 开发中，UI 设计稿中设置边框为 1 像素，前端在开发过程中如果出现 border:1px，测试会发现在 retina 屏机型中，1px 会比较粗，即经典的移动端 1px 像素问题。</p><p>1px 问题在实际面试中，尤其是大厂面试中出现的频率是比较高的。本文就探讨几种 1px 问题解决方案。</p><span id="more"></span><h2 id="1px-问题的起因"><a href="#1px-问题的起因" class="headerlink" title="1px 问题的起因"></a>1px 问题的起因</h2><p>1px 问题指的是在一些 Retina 屏幕 的机型上，移动端页面的 1px 会变得很粗，呈现出不止 1px 的效果。</p><p>原因很简单——CSS 中的 1px 并不能和移动设备上的 1px 划等号。它们之间的比例关系有一个专门的属性来描述：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设备像素比</span></span><br><span class="line"><span class="built_in">window</span>.devicePixelRatio = 设备的物理像素 / CSS像素;</span><br></pre></td></tr></table></figure><p>一个物理像素等于多少个设备像素取决于移动设备的屏幕特性(是否是<strong>Retina</strong>)和<strong>用户缩放比例</strong>。</p><p>大家可以尝试打开自己的 Chrome 浏览器，启动移动端调试模式，然后尝试在控制台去输出这个 <code>devicePixelRatio</code> 的值。这里我选中了 <code>iPhone6/7/8</code> 这系列的机型，输出的结果就是 2：</p><p><img src="https://pic.rmb.bdstatic.com/bjh/b21e79c99489c01629313a113b04a175.png" alt="image.png"></p><p>这就意味着我设置的 1px CSS 像素，在移动端上会用 2 个物理像素来进行渲染，所以实际看到的一定会比 1px 粗一些。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>1px 问题的解决方案是其实非常多的。不过从实用的角度出发，建议大家掌握 3 ～ 4 种就可以了，其他方法了解一下就行。</p><table><thead><tr><th align="center">方案</th><th align="center">优点</th><th align="center">缺点</th></tr></thead><tbody><tr><td align="center">直接写 0.5px</td><td align="center">代码简单</td><td align="center">IOS 及 Android 老设备不支持</td></tr><tr><td align="center">用图片代替边框</td><td align="center">全机型兼容</td><td align="center">修改颜色及不支持圆角</td></tr><tr><td align="center">background 渐变</td><td align="center">全机型兼容</td><td align="center">代码多及不支持圆角</td></tr><tr><td align="center">box-shadow 模拟边框实现</td><td align="center">全机型兼容</td><td align="center">有边框和虚影无法实现</td></tr><tr><td align="center">伪元素先放大后缩小</td><td align="center">简单实用</td><td align="center">缺点不明显</td></tr><tr><td align="center">设置 viewport 解决问题</td><td align="center">一套代码适用所有页面</td><td align="center">缺点不明显</td></tr></tbody></table><h3 id="1-直接写-0-5px"><a href="#1-直接写-0-5px" class="headerlink" title="1.直接写 0.5px"></a>1.直接写 0.5px</h3><p>在 <code>WWDC</code>大会上，对<code>ios8+</code>的并且是<code>DPR=2</code>的设备来说，给出来了<code>1px</code>方案，当写 <code>0.5px</code>的时候，就会显示一个物理像素宽度的 <code>border</code>。所以在 iOS 下，你可以这样写</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border</span>: <span class="number">0.5px</span> solid <span class="number">#e5e5e5</span>;</span><br></pre></td></tr></table></figure><p>虽然解决问题了，但是实用性不高，首先，得考虑 IOS 系统需要 8 及以上的版本，安卓系统则有不兼容问题。</p><h3 id="2-用图片代替边框"><a href="#2-用图片代替边框" class="headerlink" title="2.用图片代替边框"></a>2.用图片代替边框</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid transparent;</span><br><span class="line"><span class="attribute">border-image</span>: <span class="built_in">url</span>(<span class="string">&quot;xxx.jpg&quot;</span>) <span class="number">2</span> repeat;</span><br></pre></td></tr></table></figure><p>虽然解决问题了，但是后期样式调整会让人奔溃，比如颜色调整得 UI 小伙伴重新上传图片，然后又要修改代码，或者直接文件替换有涉及到图片缓存问题，如果后期来了一个要有边框圆角需求完全没法搞。</p><h3 id="3-background-渐变"><a href="#3-background-渐变" class="headerlink" title="3.background 渐变"></a>3.background 渐变</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-position</span>: left top;</span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">-webkit-gradient</span>(</span><br><span class="line">  linear,</span><br><span class="line">  left bottom,</span><br><span class="line">  left top,</span><br><span class="line">  <span class="built_in">color-stop</span>(<span class="number">0.5</span>, transparent),</span><br><span class="line">  <span class="built_in">color-stop</span>(<span class="number">0.5</span>, <span class="number">#e0e0e0</span>),</span><br><span class="line">  <span class="built_in">to</span>(<span class="number">#e0e0e0</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>代码多，展示的边框实际是在原本的 border 空间内部的，如果元素背景色有变化的样式, 边框线也会消失；最后也不能适应圆角样式。</p><h3 id="4-box-shadow-模拟边框实现"><a href="#4-box-shadow-模拟边框实现" class="headerlink" title="4.box-shadow 模拟边框实现"></a>4.box-shadow 模拟边框实现</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> -<span class="number">1px</span> <span class="number">1px</span> -<span class="number">1px</span> <span class="number">#e5e5e5</span>, //上边线</span><br><span class="line">  <span class="number">1px</span> <span class="number">0</span> <span class="number">1px</span> -<span class="number">1px</span> <span class="number">#e5e5e5</span>,</span><br><span class="line">  //右边线</span><br><span class="line">  <span class="number">0</span> <span class="number">1px</span> <span class="number">1px</span> -<span class="number">1px</span> <span class="number">#e5e5e5</span>, //下边线</span><br><span class="line">  -<span class="number">1px</span> <span class="number">0</span> <span class="number">1px</span> -<span class="number">1px</span> <span class="number">#e5e5e5</span>; //左边线</span><br></pre></td></tr></table></figure><p>毕竟展示的阴影和边框一个样，但如果有边框还要有虚影样式就没法搞，鱼和熊掌不可兼得。</p><h3 id="5-伪元素先放大后缩小"><a href="#5-伪元素先放大后缩小" class="headerlink" title="5.伪元素先放大后缩小"></a>5.伪元素先放大后缩小</h3><p>这个方法的可行性会更高，兼容性也更好。</p><p>实现方式：在目标元素的后面追加一个 ::after 伪元素，让这个元素布局为 absolute 之后、整个伸展开铺在目标元素上，然后把它的宽和高都设置为目标元素的两倍，border 值设为 1px。接着借助 CSS 动画特效中的放缩能力，把整个伪元素缩小为原来的 50%。此时，伪元素的宽高刚好可以和原有的目标元素对齐，而 border 也缩小为了 1px 的二分之一，间接地实现了 0.5px 的效果。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.hairline</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  &amp;<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(<span class="number">0.5</span>);</span><br><span class="line">    <span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ededed</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前大部分移动端 UI 采用该方案，全机型兼容。</p><h3 id="6-设置-viewport-解决问题"><a href="#6-设置-viewport-解决问题" class="headerlink" title="6.设置 viewport 解决问题"></a>6.设置 viewport 解决问题</h3><p>利用 viewport+rem+js 实现的，边框<code>1px</code>直接写上自动转换。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">      <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">id</span>=<span class="string">&quot;WebViewport&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">content</span>=<span class="string">&quot;initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> viewport = <span class="built_in">document</span>.querySelector(<span class="string">&quot;meta[name=viewport]&quot;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">//下面是根据设备像素设置viewport</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (<span class="built_in">window</span>.devicePixelRatio == <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="javascript">        viewport.setAttribute(</span></span><br><span class="line"><span class="javascript">          <span class="string">&quot;content&quot;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="string">&quot;width=device-width,initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no&quot;</span></span></span><br><span class="line"><span class="javascript">        );</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (<span class="built_in">window</span>.devicePixelRatio == <span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="javascript">        viewport.setAttribute(</span></span><br><span class="line"><span class="javascript">          <span class="string">&quot;content&quot;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="string">&quot;width=device-width,initial-scale=0.5, maximum-scale=0.5, minimum-scale=0.5, user-scalable=no&quot;</span></span></span><br><span class="line"><span class="javascript">        );</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (<span class="built_in">window</span>.devicePixelRatio == <span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="javascript">        viewport.setAttribute(</span></span><br><span class="line"><span class="javascript">          <span class="string">&quot;content&quot;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="string">&quot;width=device-width,initial-scale=0.3333333333333333, maximum-scale=0.3333333333333333, minimum-scale=0.3333333333333333, user-scalable=no&quot;</span></span></span><br><span class="line"><span class="javascript">        );</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">resize</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> width = screen.width &gt; <span class="number">750</span> ? <span class="string">&quot;75px&quot;</span> : screen.width / <span class="number">10</span> + <span class="string">&quot;px&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;html&quot;</span>)[<span class="number">0</span>].style.fontSize = width;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.onresize = resize;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这种方式，优点很明显，全机型兼容，直接写 1px 简单方便！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>新项目最好使用的是<code>设置viewport解决问题</code>，这个方法兼容性好，后期写起来方便，其次用的比较多的方法就是<code>伪元素</code>的方法。其他的背景图片，阴影的方法毕竟还是不太灵活，而且兼容性不好。</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%89%8D%E7%AB%AF/">前端</category>
      
      
      <category domain="http://example.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/">移动端</category>
      
      
      <comments>http://example.com/2021/12/01/%E7%A7%BB%E5%8A%A8%E7%AB%AF1px%E9%97%AE%E9%A2%98/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>144二叉树的前序遍历</title>
      <link>http://example.com/2021/11/30/144%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/</link>
      <guid>http://example.com/2021/11/30/144%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/</guid>
      <pubDate>Tue, 30 Nov 2021 13:36:54 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;LeetCode-144：二叉树的前序遍历&quot;&gt;&lt;a href=&quot;#LeetCode-144：二叉树的前序遍历&quot; class=&quot;headerlink&quot; title=&quot;LeetCode 144：二叉树的前序遍历&quot;&gt;&lt;/a&gt;LeetCode 144：二叉树的前序遍历&lt;/h1&gt;&lt;p&gt;给你二叉树的根节点 root ，返回它节点值的 前序 遍历。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/05/28/6LmW3Crq4hpGnzb.jpg&quot; alt=&quot;144_1.jpg&quot;&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="LeetCode-144：二叉树的前序遍历"><a href="#LeetCode-144：二叉树的前序遍历" class="headerlink" title="LeetCode 144：二叉树的前序遍历"></a>LeetCode 144：二叉树的前序遍历</h1><p>给你二叉树的根节点 root ，返回它节点值的 前序 遍历。</p><p><strong>示例 1：</strong></p><p><img src="https://i.loli.net/2021/05/28/6LmW3Crq4hpGnzb.jpg" alt="144_1.jpg"></p><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">1</span>,<span class="literal">null</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">1</span>]</span><br><span class="line">输出：[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><p><img src="https://i.loli.net/2021/05/28/P6EgbYudxjOXQtN.jpg" alt="144_2.jpg"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure><p><strong>示例 5：</strong></p><p><img src="https://i.loli.net/2021/05/28/6qdG3mPaAXEfgo8.jpg" alt="144_3.jpg"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">1</span>,<span class="literal">null</span>,<span class="number">2</span>]</span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>树中节点数目在范围 [0, 100] 内</li><li>-100 &lt;= Node.val &lt;= 100</li></ul><p><strong>进阶：</strong>递归算法很简单，你可以通过迭代算法完成吗？</p><h2 id="方法一：递归"><a href="#方法一：递归" class="headerlink" title="方法一：递归"></a>方法一：递归</h2><h3 id="思路与算法"><a href="#思路与算法" class="headerlink" title="思路与算法"></a>思路与算法</h3><p>首先需要了解什么是二叉树的前序遍历：<br>按照访问 [根节点 —— 左子树 —— 右子树] 的方式遍历这棵树。<br>而在访问左子树和右子树的时候，我们按照同样的方式遍历，直到遍历完整棵树。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">preorderTraversal</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = [];</span><br><span class="line">  <span class="keyword">const</span> preorder = <span class="function">(<span class="params">root</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span>;</span><br><span class="line">    res.push(root.val);</span><br><span class="line">    preorder(root.left);</span><br><span class="line">    preorder(root.right);</span><br><span class="line">  &#125;;</span><br><span class="line">  preorder(root);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度：_O(n)_，其中 <em>n</em> 是二叉树的节点数。每一个节点恰好被遍历一次。</p></li><li><p>空间复杂度：_O(n)_，为递归过程中栈的开销，平均情况下为 _O(logn)_，最坏情况下树呈现链状，为 _O(n)_。</p></li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E7%AE%97%E6%B3%95/">算法</category>
      
      
      <category domain="http://example.com/tags/LeetCode/">LeetCode</category>
      
      
      <comments>http://example.com/2021/11/30/144%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JavaScript 中 this 指向分析</title>
      <link>http://example.com/2021/11/30/JavaScript%E4%B8%ADthis%E6%8C%87%E5%90%91%E5%88%86%E6%9E%90/</link>
      <guid>http://example.com/2021/11/30/JavaScript%E4%B8%ADthis%E6%8C%87%E5%90%91%E5%88%86%E6%9E%90/</guid>
      <pubDate>Tue, 30 Nov 2021 13:36:26 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;神秘的-this&quot;&gt;&lt;a href=&quot;#神秘的-this&quot; class=&quot;headerlink&quot; title=&quot;神秘的 this&quot;&gt;&lt;/a&gt;神秘的 this&lt;/h1&gt;&lt;p&gt;&lt;code&gt;this&lt;/code&gt; 关键词已经折磨我很久很久了。&lt;/p&gt;
&lt;p&gt;对于 &lt;code&gt;Java&lt;/code&gt;、&lt;code&gt;PHP&lt;/code&gt; 这类&lt;em&gt;标准语言&lt;/em&gt;，&lt;code&gt;this&lt;/code&gt; 表示当前类的实例化对象，它不能够在类的方法外使用，简单直接，因此并不会让人产生困惑。&lt;/p&gt;
&lt;p&gt;但在 &lt;code&gt;JavaScript&lt;/code&gt; 中情况就比较复杂了：**this 指向当前函数调用的执行上下文(context)**，有四种函数调用类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;函数直接调用(&lt;code&gt;function invocation&lt;/code&gt;：&lt;code&gt;alert(&amp;#39;Hello World!&amp;#39;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;方法调用(&lt;code&gt;method invocation&lt;/code&gt;：&lt;code&gt;console.log(&amp;#39;Hello World!&amp;#39;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;构造函数调用(&lt;code&gt;constructor invocation&lt;/code&gt;：&lt;code&gt;new RegExp(&amp;#39;\d&amp;#39;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;间接调用(&lt;code&gt;indirect invocation&lt;/code&gt;：&lt;code&gt;alert.call(undefined, &amp;#39;Hello World!&amp;#39;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="神秘的-this"><a href="#神秘的-this" class="headerlink" title="神秘的 this"></a>神秘的 this</h1><p><code>this</code> 关键词已经折磨我很久很久了。</p><p>对于 <code>Java</code>、<code>PHP</code> 这类<em>标准语言</em>，<code>this</code> 表示当前类的实例化对象，它不能够在类的方法外使用，简单直接，因此并不会让人产生困惑。</p><p>但在 <code>JavaScript</code> 中情况就比较复杂了：**this 指向当前函数调用的执行上下文(context)**，有四种函数调用类型：</p><ul><li>函数直接调用(<code>function invocation</code>：<code>alert(&#39;Hello World!&#39;)</code></li><li>方法调用(<code>method invocation</code>：<code>console.log(&#39;Hello World!&#39;)</code></li><li>构造函数调用(<code>constructor invocation</code>：<code>new RegExp(&#39;\d&#39;)</code></li><li>间接调用(<code>indirect invocation</code>：<code>alert.call(undefined, &#39;Hello World!&#39;)</code></li></ul><span id="more"></span><p>每种调用方式都产生了各自不同的上下文，因此 <code>this</code> 有时候可能并不是我们所期待的。</p><p><img src="https://pic.rmb.bdstatic.com/bjh/b1e71f75aec45db35876195e25171877.png" alt="Gentle-explanation-of-this--7--1.png"></p><p>此外，严格模式（<code>strict mode</code>）也会影响到 <code>this</code> 的指向。</p><blockquote><p>弄清 <code>this</code> 指向的关键就是对上边函数调用类型有一个清楚的判断</p></blockquote><p>下边会详细介绍每一种调用类型的区别，以及它们是怎么影响 <code>this</code> 指向的，同时会举例说明一些容易判断出错的陷阱。</p><h1 id="1-函数直接调用-function-invocation"><a href="#1-函数直接调用-function-invocation" class="headerlink" title="1. 函数直接调用(function invocation)"></a>1. 函数直接调用(function invocation)</h1><p><em>定义：一个可以解析成函数对象的表达式，紧跟着左括号，然后是逗号分割的参数，最后是右括号。例如 parseInt(‘18’)。</em></p><p>下边看一个简单的函数直接调用的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + name + <span class="string">&quot;!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Function invocation</span></span><br><span class="line"><span class="keyword">const</span> message = hello(<span class="string">&quot;World&quot;</span>);</span><br></pre></td></tr></table></figure><p><code>hello(&#39;World&#39;)</code> 就是一个函数直接调用：<code>hello</code>可以解析成一个函数对象，紧跟着是用括号括起来的 <code>World</code> 参数。</p><p>函数直接调用和通过对象属性 <code>obj.myFunc()</code> 是不同的，它叫做方法调用 <code>method invocation</code>（后边介绍的第 <code>2</code> 种类型）。比如 <code>[1,5].join(&#39;,&#39;)</code> 这种不是一个函数直接调用，而是方法调用。<strong>这两种是最容易混淆的，需要特别注意</strong>。</p><p>此外，一个 <code>IIFE(immediately-invoked function expression)</code> 也属于函数直接调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IIFE</span></span><br><span class="line"><span class="keyword">const</span> message = (<span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + name + <span class="string">&quot;!&quot;</span>;</span><br><span class="line">&#125;)(<span class="string">&quot;World&quot;</span>);</span><br></pre></td></tr></table></figure><p>第一对括号内的 <code>(function(name) &#123;...&#125;)</code> 是一个可以解析成函数对象的表达式，接下来的一对括号中 <code>(&#39;World&#39;)</code> 括的就是参数列表。</p><h2 id="1-1-函数直接调用中的-this-指向"><a href="#1-1-函数直接调用中的-this-指向" class="headerlink" title="1.1 函数直接调用中的 this 指向"></a>1.1 函数直接调用中的 <code>this</code> 指向</h2><p>首先需要知道全局对象是什么，不同执行环境中全局对象不同。在浏览器中全局对象是 <code>window</code>，<code>Node.js</code> 中的全局对象是 <code>global</code>。下边主要以浏览器的执行环境来分析。</p><p><img src="https://pic.rmb.bdstatic.com/bjh/9f57920d9b81c53aa94a680511445e0e.png" alt="2-1.png"></p><p>在「函数直接调用」中，执行上下文就是全局对象，也就是 <code>this</code> 的指向。</p><p>让我们看下边的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span> === <span class="built_in">window</span>); <span class="comment">// =&gt; true</span></span><br><span class="line">  <span class="built_in">this</span>.myNumber = <span class="number">20</span>; <span class="comment">// add &#x27;myNumber&#x27; property to global object</span></span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// sum() is invoked as a function</span></span><br><span class="line"><span class="comment">// this in sum() is a global object (window)</span></span><br><span class="line">sum(<span class="number">15</span>, <span class="number">16</span>); <span class="comment">// =&gt; 31</span></span><br><span class="line"><span class="built_in">window</span>.myNumber; <span class="comment">// =&gt; 20</span></span><br></pre></td></tr></table></figure><p>当调用 <code>sum(15, 16)</code> 的时候，<code>JavaScript</code> 会自动将 <code>this</code> 指向全局对象（浏览器中的 <code>window</code>）。</p><p>当 <code>this</code> 在函数外的顶级作用域中使用的时候，同样也是指向全局对象的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span> === <span class="built_in">window</span>); <span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">this</span>.myString = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.myString); <span class="comment">// =&gt; &#x27;Hello World!&#x27;</span></span><br></pre></td></tr></table></figure><p>在 <code>html</code> 中的 <code>script</code> 中也是一样的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- In an html file --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="built_in">console</span>.log(<span class="built_in">this</span> === <span class="built_in">window</span>); <span class="comment">// =&gt; true</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="1-2-函数直接调用中的-this-指向（严格模式）"><a href="#1-2-函数直接调用中的-this-指向（严格模式）" class="headerlink" title="1.2 函数直接调用中的 this 指向（严格模式）"></a>1.2 函数直接调用中的 <code>this</code> 指向（严格模式）</h2><blockquote><p>严格模式下，函数直接调用中的 <code>this</code> 是 <code>undefined</code>。</p></blockquote><p>严格模式在 ECMAScript 5.1 出现，对 <code>js</code> 一些语法进行了限制，可以提供一个更加安全、健壮的错误检查机制。</p><p>在函数体顶部加入 <code>&#39;user strict&#39;</code> 即可使用严格模式。</p><p>严格模式会影响当前上下文环境（<code>context</code>)，在函数直接调用场景中，<code>this</code> 会变为 <code>undefind</code>，而不是上边介绍的全局对象。</p><p><img src="https://pic.rmb.bdstatic.com/bjh/30b71cea1c9309723268807b4aea7737.png" alt="3-1.png"></p><p>下边举一个使用严格模式的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"><span class="meta">  &quot;use strict&quot;</span>; <span class="comment">// enable the strict mode</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span> === <span class="literal">undefined</span>); <span class="comment">// =&gt; true</span></span><br><span class="line">  <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// multiply() function invocation with strict mode enabled</span></span><br><span class="line"><span class="comment">// this in multiply() is undefined</span></span><br><span class="line">multiply(<span class="number">2</span>, <span class="number">5</span>); <span class="comment">// =&gt; 10</span></span><br></pre></td></tr></table></figure><p>当使用严格模式调用 <code>multiply(2, 5)</code> 的时候，<code>this</code> 就是 <code>undefined</code>。</p><p>严格模式不仅对当前作用域有效，它内部的作用域（当前作用域内定义的函数内）也会是严格模式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  &quot;use strict&quot;</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">concat</span>(<span class="params">str1, str2</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// the strict mode is enabled too</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span> === <span class="literal">undefined</span>); <span class="comment">// =&gt; true</span></span><br><span class="line">    <span class="keyword">return</span> str1 + str2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span> === <span class="literal">undefined</span>); <span class="comment">// =&gt; true</span></span><br><span class="line">  <span class="comment">// concat() is invoked as a function in strict mode</span></span><br><span class="line">  <span class="comment">// this in concat() is undefined</span></span><br><span class="line">  concat(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot; World!&quot;</span>); <span class="comment">// =&gt; &quot;Hello World!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">execute();</span><br></pre></td></tr></table></figure><p>上边的代码中，<code>use strict</code> 是写在 <code>execute</code> 函数体的头部，函数内部的 <code>this</code> 会是 <code>undefined</code>。同时，因为 <code>concat</code> 是定义在 <code>execute</code> 内部，它也会继承严格模式。因此 <code>concat(&#39;Hello&#39;, &#39; World!&#39;)</code> 的调用，其内部的 <code>this</code> 也会指向 <code>undefined</code>。</p><p>一个单独 <code>js</code> 文件可能包含多个作用域，因此不同的作用域可能分别处于非严格模式和严格模式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nonStrictSum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// non-strict mode</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span> === <span class="built_in">window</span>); <span class="comment">// =&gt; true</span></span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strictSum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"><span class="meta">  &quot;use strict&quot;</span>;</span><br><span class="line">  <span class="comment">// strict mode is enabled</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span> === <span class="literal">undefined</span>); <span class="comment">// =&gt; true</span></span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// nonStrictSum() is invoked as a function in non-strict mode</span></span><br><span class="line"><span class="comment">// this in nonStrictSum() is the window object</span></span><br><span class="line">nonStrictSum(<span class="number">5</span>, <span class="number">6</span>); <span class="comment">// =&gt; 11</span></span><br><span class="line"><span class="comment">// strictSum() is invoked as a function in strict mode</span></span><br><span class="line"><span class="comment">// this in strictSum() is undefined</span></span><br><span class="line">strictSum(<span class="number">8</span>, <span class="number">12</span>); <span class="comment">// =&gt; 20</span></span><br></pre></td></tr></table></figure><h2 id="1-3-陷阱：内部函数的-this-指向"><a href="#1-3-陷阱：内部函数的-this-指向" class="headerlink" title="1.3 陷阱：内部函数的 this 指向"></a>1.3 陷阱：内部函数的 <code>this</code> 指向</h2><p>⚠️ 一个很普遍的陷阱：对于函数直接调用，可能会认为如果是函数内部定义的函数，它的 <code>this</code> 会指向外部函数的上下文。</p><p>👍 要始终记得，内部函数的 <code>this</code> 指向（除了箭头函数）只和它的调用类型相关（也就是本文介绍的几种类型），而不是它所在函数的上下文。</p><p>为了使 <code>this</code> 变成我们所期待的值，我们可以通过间接调用来实现（比如 <code>.call()</code> 或者 <code>.apply()</code>，下边第 <code>4</code> 节会介绍），或者创造一个绑定函数（使用 <code>.bind()</code>，下边第 <code>5</code> 节会介绍）。</p><p>看一下下边两数相加的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = &#123;</span><br><span class="line">  <span class="attr">numberA</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">numberB</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">sum</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span> === numbers); <span class="comment">// =&gt; true</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">calculate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// this is window or undefined in strict mode</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span> === numbers); <span class="comment">// =&gt; false</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.numberA + <span class="built_in">this</span>.numberB;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> calculate();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">numbers.sum(); <span class="comment">// =&gt; NaN or throws TypeError in strict mode</span></span><br></pre></td></tr></table></figure><p>⚠️ <code>numbers.sum()</code> 属于对象的一个方法调用，下一小节会讲。从代码分析，这里 <code>calculate()</code> 的结果其实就是 <code>numbers.sum()</code>的结果 。因为 <code>calculate</code> 函数定义在 <code>sum</code> 中，<code>sum</code> 是 <code>numbers</code> 对象的属性，因此当调用 <code>numbers.sum()</code>， 我们会觉得 <code>calculate</code> 中的 <code>this</code> 也指向 <code>numbers</code> 对象。</p><p>重点来了，由于 <code>calculate()</code> 属于我们这一小节中讲的「函数直接调用」的类型，而不是下一小节的「方法调用」。所以 <code>calculate</code>中的 <code>this</code> 指向全局对象 <code>window</code>，或者严格模式下的 <code>undefined</code>。即使在 <code>numbers.sum()</code> 中的 <code>this</code> 指向当前对象 <code>numbers</code>，但是它并不会影响 <code>calculate</code> 中的 <code>this</code>。</p><p>因此 <code>numbers.sum()</code> 的调用结果是 <code>NaN</code> （或者在严格模式下抛出一个错误 <code>TypeError: Cannot read property &#39;numberA&#39; of undefined</code>)。而不是我们所期待的 <code>5 + 10 = 15</code> 。</p><p>👍 为了解决这个问题，<code>calculate()</code> 函数必须拥有和 <code>numbers.sum()</code> 相同的 <code>this</code> 指向，这样在 <code>calculate</code> 中才能访问到 <code>this.numberA</code> 和 <code>this.numberB</code>。</p><p>一种解决方法就是使用 <code>call</code> 方法来手动改变 <code>calculate()</code> 中的 <code>this</code> 指向。（第 <code>4</code> 节的时候会介绍「间接调用」这种类型）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = &#123;</span><br><span class="line">  <span class="attr">numberA</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">numberB</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">sum</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span> === numbers); <span class="comment">// =&gt; true</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">calculate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span> === numbers); <span class="comment">// =&gt; true</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.numberA + <span class="built_in">this</span>.numberB;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// use .call() method to modify the context</span></span><br><span class="line">    <span class="keyword">return</span> calculate.call(<span class="built_in">this</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">numbers.sum(); <span class="comment">// =&gt; 15</span></span><br></pre></td></tr></table></figure><p><code>calculate.call(this)</code> 会正常执行 <code>calculate()</code>函数，同时会将它的执行上下文变为所传入的第一个参数。</p><p>现在 <code>this.numberA + this.numberB</code> 就相当于 <code>number.numberA + numbers.numberB</code> 了，所以结果就是 <code>5 + 10 = 15</code>了。</p><p>另外一种解决方法看起来会更好，那就是通过箭头函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = &#123;</span><br><span class="line">  <span class="attr">numberA</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">numberB</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">sum</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span> === numbers); <span class="comment">// =&gt; true</span></span><br><span class="line">    <span class="keyword">const</span> calculate = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span> === numbers); <span class="comment">// =&gt; true</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.numberA + <span class="built_in">this</span>.numberB;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> calculate();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">numbers.sum(); <span class="comment">// =&gt; 15</span></span><br></pre></td></tr></table></figure><p>箭头函数中的 <code>this</code> 会指向它所定义的地方，这里就是 <code>numbers.sum</code> 中的 <code>this</code>，会在第 <code>6</code> 讲中继续讲箭头函数。</p><h1 id="2-方法调用"><a href="#2-方法调用" class="headerlink" title="2 方法调用"></a>2 方法调用</h1><p>对象中的某个属性如果是函数，我们称其为方法。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myObject = &#123;</span><br><span class="line">  <span class="comment">// helloMethod is a method</span></span><br><span class="line">  <span class="attr">helloMethod</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> message = myObject.helloMethod();</span><br></pre></td></tr></table></figure><p><code>helloMethod</code> 是 <code>myObject</code> 的一个方法。使用属性访问器 <code>myObject.helloMethod</code> 可以调用这个方法。</p><p><em>方法调用定义：通过属性访问器得到一个函数对象，紧跟着左括号，然后是逗号分割的参数，最后是右括号。例如上边的例子 myObject.helloMethod()。</em></p><p>更多其他的例子：<code>[1, 2].join(&#39;,&#39;)</code> or <code>/\s/.test(&#39;beautiful world&#39;)</code>。</p><p>再强调一遍，区分上一节介绍的「函数直接调用」类型和这一节介绍的「方法调用」非常重要。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> words = [<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World&quot;</span>];</span><br><span class="line">words.join(<span class="string">&quot;, &quot;</span>); <span class="comment">// method invocation</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="function"><span class="title">myMethod</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>().toString();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">obj.myMethod(); <span class="comment">// method invocation</span></span><br><span class="line"><span class="keyword">const</span> func = obj.myMethod;</span><br><span class="line">func(); <span class="comment">// function invocation</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&quot;16.6&quot;</span>); <span class="comment">// function invocation</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="number">0</span>); <span class="comment">// function invocation</span></span><br></pre></td></tr></table></figure><h2 id="2-1-方法调用中的-this-指向"><a href="#2-1-方法调用中的-this-指向" class="headerlink" title="2.1 方法调用中的 this 指向"></a>2.1 方法调用中的 <code>this</code> 指向</h2><blockquote><p>在方法调用中，<code>this</code> 指向拥有这个方法的对象。</p></blockquote><p>当我们调用对象中的一个方法时，<code>this</code> 指向拥有这个方法的对象。</p><p><img src="https://pic.rmb.bdstatic.com/bjh/e298276d726098225ae0d1b9b0afe158.png" alt="4-1.png"></p><p>我们来看一个增加数字的例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> calc = &#123;</span><br><span class="line">  <span class="attr">num</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="function"><span class="title">increment</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span> === calc); <span class="comment">// =&gt; true</span></span><br><span class="line">    <span class="built_in">this</span>.num += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.num;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// method invocation. this is calc</span></span><br><span class="line">calc.increment(); <span class="comment">// =&gt; 1</span></span><br><span class="line">calc.increment(); <span class="comment">// =&gt; 2</span></span><br></pre></td></tr></table></figure><p>通过方法调用的方式 <code>calc.increment()</code>，使得 <code>increment</code> 内部的 <code>this</code> 指向了 <code>cals</code> 对象，因此 <code>this.num</code> 会成功增加 <code>num</code> 属性的值。</p><p>让我们再看一个例子。对象通过原型继承一个方法，当方法通过属性访问器调用的时候，所继承的这个方法中的 <code>this</code> 也是指向对象本身：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myDog = <span class="built_in">Object</span>.create(&#123;</span><br><span class="line">  <span class="function"><span class="title">sayName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span> === myDog); <span class="comment">// =&gt; true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">myDog.name = <span class="string">&quot;Milo&quot;</span>;</span><br><span class="line"><span class="comment">// method invocation. this is myDog</span></span><br><span class="line">myDog.sayName(); <span class="comment">// =&gt; &#x27;Milo&#x27;</span></span><br></pre></td></tr></table></figure><p>上边代码中，<code>Object.create()</code> 返回一个新对象 <code>myDog</code>，并且将它的原型对象指向第一个参数。<code>myDog</code> 对象会继承 <code>SayName</code> 方法。</p><p>在 <code>ECMAScript 2015</code> 中的 <code>class</code> 关键词里，方法调用中的上下文，也就是 <code>this</code> 同样指向它本身。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Planet</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span> === earth); <span class="comment">// =&gt; true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> earth = <span class="keyword">new</span> Planet(<span class="string">&quot;Earth&quot;</span>);</span><br><span class="line"><span class="comment">// method invocation. the context is earth</span></span><br><span class="line">earth.getName(); <span class="comment">// =&gt; &#x27;Earth&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="2-2-陷阱：将对象中的方法抽离"><a href="#2-2-陷阱：将对象中的方法抽离" class="headerlink" title="2.2 陷阱：将对象中的方法抽离"></a>2.2 陷阱：将对象中的方法抽离</h2><p>⚠️ 我们可以将对象中的方法提取出来做为一个独立的变量 <code>const alone = myObj.myMethod</code>。当调用函数的时候 <code>alone()</code>，由于它是从原来对象拆出来的，所以可能会认为函数中的 <code>this</code> 会指向 <code>myObject</code>。</p><p>👍 然而，如果一个方法没有经过对象的属性访问器调用，那它就属于第一节介绍的「函数直接调用」类型，这里的 <code>this</code> 会指向全局对象 <code>window</code> 或者严格模式下的 <code>undefined</code>。</p><p>我们可以通过 <code>bind</code> 方法来修正这种情况，<code>const alone = myObj.myMethod.bind(myObj)</code>。</p><p>再看一个例子，我们通过构造函数 <code>Pet</code> 得到一个实例化对象 <code>myCat</code>。然后通过 <code>setTimeout()</code> 在一秒后打印对象内部的信息。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pet</span>(<span class="params">type, legs</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.type = type;</span><br><span class="line">  <span class="built_in">this</span>.legs = legs;</span><br><span class="line">  <span class="built_in">this</span>.logInfo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span> === myCat); <span class="comment">// =&gt; false</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`The <span class="subst">$&#123;<span class="built_in">this</span>.type&#125;</span> has <span class="subst">$&#123;<span class="built_in">this</span>.legs&#125;</span> legs`</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> myCat = <span class="keyword">new</span> Pet(<span class="string">&quot;Cat&quot;</span>, <span class="number">4</span>);</span><br><span class="line"><span class="comment">// logs &quot;The undefined has undefined legs&quot;</span></span><br><span class="line"><span class="comment">// or throws a TypeError in strict mode</span></span><br><span class="line"><span class="built_in">setTimeout</span>(myCat.logInfo, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>⚠️ 你也许会认为 <code>setTimeout(myCat.logInfo, 1000)</code> 将会调用 <code>myCat.logInfo()</code>，然后打印 <code>myCat</code> 的 <code>type</code> 和 <code>legs</code>。</p><p>但事与愿违，方法是从对象中抽离然后做为了一个参数，<code>setTimout(myCat.logInfo)</code> 等价于下边的代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(myCat.logInfo);</span><br><span class="line"><span class="comment">// is equivalent to:</span></span><br><span class="line"><span class="keyword">const</span> extractedLogInfo = myCat.logInfo;</span><br><span class="line"><span class="built_in">setTimeout</span>(extractedLogInfo);</span><br></pre></td></tr></table></figure><p>当调用提取的 <code>logInfo</code> 的时候其实属于「函数直接调用」类型，所以 <code>this</code> 会指向全局对象 <code>window</code> 或者严格模式下的<code>undefined</code>，而不会是 <code>myCat</code> 对象。因此 <code>logInfo</code> 函数并不能正确的打印相关的信息。</p><p>👍 同样的，这种情况下我们可以使用 <code>bind</code> 来修复。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pet</span>(<span class="params">type, legs</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.type = type;</span><br><span class="line">  <span class="built_in">this</span>.legs = legs;</span><br><span class="line">  <span class="built_in">this</span>.logInfo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span> === myCat); <span class="comment">// =&gt; true</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`The <span class="subst">$&#123;<span class="built_in">this</span>.type&#125;</span> has <span class="subst">$&#123;<span class="built_in">this</span>.legs&#125;</span> legs`</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> myCat = <span class="keyword">new</span> Pet(<span class="string">&quot;Cat&quot;</span>, <span class="number">4</span>);</span><br><span class="line"><span class="comment">// Create a bound function</span></span><br><span class="line"><span class="keyword">const</span> boundLogInfo = myCat.logInfo.bind(myCat);</span><br><span class="line"><span class="comment">// logs &quot;The Cat has 4 legs&quot;</span></span><br><span class="line"><span class="built_in">setTimeout</span>(boundLogInfo, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p><code>myCat.logInfo.bind(myCat)</code> 会返回一个新的函数，会像 <code>logInfo</code> 那样执行，同时 <code>this</code> 会指向 <code>myCat</code>，即使我们是通过 「函数直接调用」。</p><p>当然，我们也可以使用箭头函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pet</span>(<span class="params">type, legs</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.type = type;</span><br><span class="line">  <span class="built_in">this</span>.legs = legs;</span><br><span class="line">  <span class="built_in">this</span>.logInfo = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span> === myCat); <span class="comment">// =&gt; true</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`The <span class="subst">$&#123;<span class="built_in">this</span>.type&#125;</span> has <span class="subst">$&#123;<span class="built_in">this</span>.legs&#125;</span> legs`</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> myCat = <span class="keyword">new</span> Pet(<span class="string">&quot;Cat&quot;</span>, <span class="number">4</span>);</span><br><span class="line"><span class="comment">// logs &quot;The Cat has 4 legs&quot;</span></span><br><span class="line"><span class="built_in">setTimeout</span>(myCat.logInfo, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>如果你使用了 <code>class</code>，为了防止上边的问题，我们可以将箭头函数做为一个类属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">type, legs</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.type = type;</span><br><span class="line">    <span class="built_in">this</span>.legs = legs;</span><br><span class="line">  &#125;</span><br><span class="line">  logInfo = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span> === myCat); <span class="comment">// =&gt; true</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`The <span class="subst">$&#123;<span class="built_in">this</span>.type&#125;</span> has <span class="subst">$&#123;<span class="built_in">this</span>.legs&#125;</span> legs`</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> myCat = <span class="keyword">new</span> Pet(<span class="string">&quot;Cat&quot;</span>, <span class="number">4</span>);</span><br><span class="line"><span class="comment">// logs &quot;The Cat has 4 legs&quot;</span></span><br><span class="line"><span class="built_in">setTimeout</span>(myCat.logInfo, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h1 id="3-构造函数调用"><a href="#3-构造函数调用" class="headerlink" title="3. 构造函数调用"></a>3. 构造函数调用</h1><p><em>定义：以 new 关键词开头，接着是一个可以解析成函数对象的表达式，紧跟着左括号，然后是逗号分割的参数，最后是右括号。例如 new Pet(‘cat’, 4)、 new RegExp(‘\d’)。</em></p><p>让我们定义 <code>Country</code> 函数，然后通过构造函数的方式调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Country</span>(<span class="params">name, traveled</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name ? name : <span class="string">&quot;United Kingdom&quot;</span>;</span><br><span class="line">  <span class="built_in">this</span>.traveled = <span class="built_in">Boolean</span>(traveled); <span class="comment">// transform to a boolean</span></span><br><span class="line">&#125;</span><br><span class="line">Country.prototype.travel = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.traveled = <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// Constructor invocation</span></span><br><span class="line"><span class="keyword">const</span> france = <span class="keyword">new</span> Country(<span class="string">&quot;France&quot;</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">// Constructor invocation</span></span><br><span class="line"><span class="keyword">const</span> unitedKingdom = <span class="keyword">new</span> Country();</span><br><span class="line">france.travel(); <span class="comment">// Travel to France</span></span><br></pre></td></tr></table></figure><p><code>new Country(&#39;France&#39;, false)</code> 这种调用方式会创建一个新对象，它的 <code>name</code> 属性是 <code>France</code>。</p><p>如果构造函数不需要传递参数，我们可以省略到它的括号，<code>new Country</code>。</p><p>从 <code>ECMAScript 2015</code> 开始，<code>Js</code> 允许我们通过 <code>class</code> 关键词来定义构造函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">City</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name, traveled</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.traveled = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">travel</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.traveled = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Constructor invocation</span></span><br><span class="line"><span class="keyword">const</span> paris = <span class="keyword">new</span> City(<span class="string">&quot;Paris&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">paris.travel();</span><br></pre></td></tr></table></figure><p><code>new City(&#39;Paris&#39;)</code> 就是「构造函数调用」类型。创建的对象通过类中一个特殊的方法 <code>constructor</code> 来初始化，其中 <code>this</code> 就指向当前创建的新对象。</p><p>如果属性访问器 <code>myObject.myFunction</code> 通过 <code>new</code> 调用，那么这种就属于「构造函数调用」，而不再是「方法调用」。</p><p>举个例子，<code>new myObject.myFunction()</code>：相当于先通过属性访问器抽离函数 <code>extractedFunction = myObject.myFunction</code>，然后通过构造函数的方法创建一个新对象 <code>new extractedFunction()</code>。</p><h2 id="3-1-构造函数调用中的-this-指向"><a href="#3-1-构造函数调用中的-this-指向" class="headerlink" title="3.1 构造函数调用中的 this 指向"></a>3.1 构造函数调用中的 <code>this</code> 指向</h2><blockquote><p>this 指向通过构造函数创建的新对象</p></blockquote><p>构造函数的上下文是新创建的对象。构造函数通过传来的参数进行初始化对象，设置初始值、绑定事件监听函数等等。</p><p><img src="https://pic.rmb.bdstatic.com/bjh/65f562cd0d3fb617b56fbf08da522133.png" alt="5-1.png"></p><p>看一下下边的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// this is fooInstance</span></span><br><span class="line">  <span class="built_in">this</span>.property = <span class="string">&quot;Default Value&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Constructor invocation</span></span><br><span class="line"><span class="keyword">const</span> fooInstance = <span class="keyword">new</span> Foo();</span><br><span class="line">fooInstance.property; <span class="comment">// =&gt; &#x27;Default Value&#x27;</span></span><br></pre></td></tr></table></figure><p><code>new Foo()</code> 通过构造函数的方式调用，其中的 <code>this</code> 就指向当前的对象 <code>fooInstance</code>，<code>this.property</code> 被初始化了一个值。</p><p>同样的情况在 <code>class</code> 中也是一样的，只不过初始化发生在 <code>constructor</code> 中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// this is barInstance</span></span><br><span class="line">    <span class="built_in">this</span>.property = <span class="string">&quot;Default Value&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Constructor invocation</span></span><br><span class="line"><span class="keyword">const</span> barInstance = <span class="keyword">new</span> Bar();</span><br><span class="line">barInstance.property; <span class="comment">// =&gt; &#x27;Default Value&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="3-2-陷阱：忘记使用-new"><a href="#3-2-陷阱：忘记使用-new" class="headerlink" title="3.2 陷阱：忘记使用 new"></a>3.2 陷阱：忘记使用 <code>new</code></h2><p>有些 <code>JavaScript</code> 的函数除了可以通过构造函数创建对象，也可以通过函数直接调用的方式，比如 <code>RegExp</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reg1 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;\\w+&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> reg2 = <span class="built_in">RegExp</span>(<span class="string">&quot;\\w+&quot;</span>);</span><br><span class="line">reg1 <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>; <span class="comment">// =&gt; true</span></span><br><span class="line">reg2 <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>; <span class="comment">// =&gt; true</span></span><br><span class="line">reg1.source === reg2.source; <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><p>执行 <code>new RegExp(&#39;\\w+&#39;)</code> 和 <code>RegExp(&#39;\\w+&#39;)</code> ，<code>Js</code> 创建了等价的正则表达式对象。</p><p>⚠️ 通过函数直接调用的方式去创建对象可能会有潜在风险，因为如果不使用 <code>new</code> 关键词 一些构造函数可能会忽略掉属性的初始化。</p><p>看一下下边的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vehicle</span>(<span class="params">type, wheelsCount</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.type = type;</span><br><span class="line">  <span class="built_in">this</span>.wheelsCount = wheelsCount;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Function invocation</span></span><br><span class="line"><span class="keyword">const</span> car = Vehicle(<span class="string">&quot;Car&quot;</span>, <span class="number">4</span>);</span><br><span class="line">car.type; <span class="comment">// =&gt; &#x27;Car&#x27;</span></span><br><span class="line">car.wheelsCount; <span class="comment">// =&gt; 4</span></span><br><span class="line">car === <span class="built_in">window</span>; <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><p><code>Vehicle</code> 在上下文对象中会初始化 <code>type</code> 和 <code>wheelsCount</code> 属性。当执行 <code>Vehicle(&#39;Car&#39;, 4)</code> 的时候将 <code>car</code> 对象返回，拥有正确的属性 <code>car.type</code> 和 <code>car.wheelCount</code> 。</p><p>上边看起来就是按照我们需要的样子进行的初始化，打印出来的值也都是正确的。</p><p>然而，<code>Vehicle(&#39;Car&#39;, 4)</code> 属于「函数直接调用类型」，因此它的 <code>this</code> 指向 <code>window</code>。所以，上边返回的 <code>car</code> 其实是 <code>window</code>对象，将 <code>type</code> 和 <code>wheelCount</code> 属性都挂在了 <code>window</code> 上。</p><p>👍 为了确保在使用构造函数的时候加上了 <code>new</code> 关键词，我们可以做一些改进：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vehicle</span>(<span class="params">type, wheelsCount</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!(<span class="built_in">this</span> <span class="keyword">instanceof</span> Vehicle)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">&quot;Error: Incorrect invocation&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">this</span>.type = type;</span><br><span class="line">  <span class="built_in">this</span>.wheelsCount = wheelsCount;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Constructor invocation</span></span><br><span class="line"><span class="keyword">const</span> car = <span class="keyword">new</span> Vehicle(<span class="string">&quot;Car&quot;</span>, <span class="number">4</span>);</span><br><span class="line">car.type; <span class="comment">// =&gt; &#x27;Car&#x27;</span></span><br><span class="line">car.wheelsCount; <span class="comment">// =&gt; 4</span></span><br><span class="line">car <span class="keyword">instanceof</span> Vehicle; <span class="comment">// =&gt; true</span></span><br><span class="line"><span class="comment">// Function invocation. Throws an error.</span></span><br><span class="line"><span class="keyword">const</span> brokenCar = Vehicle(<span class="string">&quot;Broken Car&quot;</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>通过判断 <code>this instanceof Vehicle</code> ，我们就可以保证当前的执行上下文环境是当前创建的新对象，保证 <code>this</code> 指向正确。</p><h1 id="4-间接调用"><a href="#4-间接调用" class="headerlink" title="4. 间接调用"></a>4. 间接调用</h1><blockquote><p><code>this</code> 指向 <code>.call()</code> 或者 <code>.apply()</code> 所传的第一个参数</p></blockquote><p><img src="https://pic.rmb.bdstatic.com/bjh/cbbd523b9aba7cd9ba03e1bae0dd1661.png" alt="6-1.png"></p><p>下边看一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rabbit = &#123; <span class="attr">name</span>: <span class="string">&quot;White Rabbit&quot;</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concatName</span>(<span class="params">string</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span> === rabbit); <span class="comment">// =&gt; true</span></span><br><span class="line">  <span class="keyword">return</span> string + <span class="built_in">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Indirect invocations</span></span><br><span class="line">concatName.call(rabbit, <span class="string">&quot;Hello &quot;</span>); <span class="comment">// =&gt; &#x27;Hello White Rabbit&#x27;</span></span><br><span class="line">concatName.apply(rabbit, [<span class="string">&quot;Bye &quot;</span>]); <span class="comment">// =&gt; &#x27;Bye White Rabbit&#x27;</span></span><br></pre></td></tr></table></figure><p>间接调用方式对于修正函数的上下文执行环境很有用，例如上边我们介绍过的很多例子，当通过「函数直接调用」方式时，<code>this</code> 会指向 <code>window</code> 或者严格模式下的 <code>undefined</code>。此时我们就可以通过 <code>.call()</code> 或者 <code>.apply()</code> 将 <code>this</code> 指向我们需要的对象。</p><p>另一个经典的例子就是 <code>ES5</code> 中调用父类的构造函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Runner</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span> <span class="keyword">instanceof</span> Rabbit); <span class="comment">// =&gt; true</span></span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rabbit</span>(<span class="params">name, countLegs</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span> <span class="keyword">instanceof</span> Rabbit); <span class="comment">// =&gt; true</span></span><br><span class="line">  <span class="comment">// Indirect invocation. Call parent constructor.</span></span><br><span class="line">  Runner.call(<span class="built_in">this</span>, name);</span><br><span class="line">  <span class="built_in">this</span>.countLegs = countLegs;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> myRabbit = <span class="keyword">new</span> Rabbit(<span class="string">&quot;White Rabbit&quot;</span>, <span class="number">4</span>);</span><br><span class="line">myRabbit; <span class="comment">// &#123; name: &#x27;White Rabbit&#x27;, countLegs: 4 &#125;</span></span><br></pre></td></tr></table></figure><p>在 <code>Rabbit</code> 中调用 <code>Runner.call(this, name)</code> 使得在父函数中的 <code>this</code> 是当前子类相应的对象。</p><h1 id="5-绑定函数"><a href="#5-绑定函数" class="headerlink" title="5. 绑定函数"></a>5. 绑定函数</h1><p><em>定义：执行上下文或者参数被绑定了具体值的函数。可以通过 .bind() 进行创建。原始函数和新的函数共享了相同的代码和作用域，但是执行的时候拥有不同的执行上下文和参数。</em></p><p><code>myFunc.bind(thisArg[, arg1, arg2, ...)</code> 的第一个参数 <code>thisArg</code> 作为执行上下文，后边的 <code>arg1, arg2, ...</code> 是要预置的参数值。</p><p>看一下下边的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">number</span>) </span>&#123;</span><br><span class="line"><span class="meta">  &quot;use strict&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span> * number;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// create a bound function with context</span></span><br><span class="line"><span class="keyword">const</span> double = multiply.bind(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// invoke the bound function</span></span><br><span class="line">double(<span class="number">3</span>); <span class="comment">// =&gt; 6</span></span><br><span class="line">double(<span class="number">10</span>); <span class="comment">// =&gt; 20</span></span><br></pre></td></tr></table></figure><p><code>multiply.bind(2)</code> 返回了一个新函数 <code>double</code>，相当于 <code>2.multiply</code>。</p><p><code>.bind()</code> 和 <code>.apply()</code> 和 <code>.call()</code> 最大的不同就是，<code>.bind()</code> 是返回一个拥有预设的 <code>this</code> 和参数的新函数，后边还需要被调用才会执行。而 <code>.apply()</code> 和 <code>.call()</code> 是调用的时候就执行了。</p><h2 id="5-1-绑定函数中的-this-指向"><a href="#5-1-绑定函数中的-this-指向" class="headerlink" title="5.1 绑定函数中的 this 指向"></a>5.1 绑定函数中的 <code>this</code> 指向</h2><blockquote><p>当执行一个绑定函数的时候，<code>this</code> 指向创建绑定函数 <code>myFunc.bind(thisArg)</code> 时候传的第一个参数。</p></blockquote><p><code>.bind()</code> 函数的作用就是创建一个新的函数，我们需要将要绑定的上下文环境作为第一个参数传给它。</p><p><img src="https://pic.rmb.bdstatic.com/bjh/6aa1268e6925d5637e269bb5e59d6e71.png" alt="7-1.png"></p><p>让我们看一下例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = &#123;</span><br><span class="line">  <span class="attr">array</span>: [<span class="number">3</span>, <span class="number">5</span>, <span class="number">10</span>],</span><br><span class="line">  <span class="function"><span class="title">getNumbers</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.array;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// Create a bound function</span></span><br><span class="line"><span class="keyword">const</span> boundGetNumbers = numbers.getNumbers.bind(numbers);</span><br><span class="line">boundGetNumbers(); <span class="comment">// =&gt; [3, 5, 10]</span></span><br><span class="line"><span class="comment">// Extract method from object</span></span><br><span class="line"><span class="keyword">const</span> simpleGetNumbers = numbers.getNumbers;</span><br><span class="line">simpleGetNumbers(); <span class="comment">// =&gt; undefined or throws an error in strict mode</span></span><br></pre></td></tr></table></figure><p>通过 <code>bind</code> 绑定后返回的 <code>boundGetNumbers</code> 函数中 <code>this</code> 指向了传入的 <code>numbers</code>，因此当执行的时候返回的是传入的数组。</p><p>如果是简单的将 <code>numbers.getNumbers</code> 抽离出来作为一个新函数 <code>simpleGetNumbers</code> ，此时属于「函数直接调用类型」，因此 <code>this</code> 指向 <code>window</code> ，执行的时候就不是我们所期待的了。</p><h2 id="5-2-牢固的上下文绑定"><a href="#5-2-牢固的上下文绑定" class="headerlink" title="5.2 牢固的上下文绑定"></a>5.2 牢固的上下文绑定</h2><p><code>.bind()</code> 会创造一个永久的上下文绑定，其中的 <code>this</code> 指向不会再发生改变。我们无法再通过 <code>.call()</code>、<code>.apply()</code> 或者 <code>.bind()</code> 来改变 <code>this</code> 指向。</p><p>唯一能够改变的方式就是通过构造函数调用，但平常开发中不建议采用这种调用方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getThis</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  &quot;use strict&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> one = getThis.bind(<span class="number">1</span>);</span><br><span class="line">one(); <span class="comment">// =&gt; 1</span></span><br><span class="line">one.call(<span class="number">2</span>); <span class="comment">// =&gt; 1</span></span><br><span class="line">one.apply(<span class="number">2</span>); <span class="comment">// =&gt; 1</span></span><br><span class="line">one.bind(<span class="number">2</span>)(); <span class="comment">// =&gt; 1</span></span><br><span class="line"><span class="keyword">new</span> one(); <span class="comment">// =&gt; Object</span></span><br></pre></td></tr></table></figure><p>可以看一下上边的结果，只有 <code>new one()</code> 中的 <code>this</code> 指向来一个新对象，而其他方式中的 <code>this</code> 都是最初绑定的 <code>1</code>。</p><h1 id="6-箭头函数"><a href="#6-箭头函数" class="headerlink" title="6 箭头函数"></a>6 箭头函数</h1><p><em>定义：箭头函数是定义函数的一种简写形式，并且它绑定的上下文是词法作用域确定的（简单理解就是 this 指向它定义位置的上下文）。</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hello = <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + name;</span><br><span class="line">&#125;;</span><br><span class="line">hello(<span class="string">&quot;World&quot;</span>); <span class="comment">// =&gt; &#x27;Hello World&#x27;</span></span><br><span class="line"><span class="comment">// Keep only even numbers</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>].filter(<span class="function">(<span class="params">item</span>) =&gt;</span> item % <span class="number">2</span> === <span class="number">0</span>); <span class="comment">// =&gt; [2, 6]</span></span><br></pre></td></tr></table></figure><h2 id="6-1-箭头函数中的-this"><a href="#6-1-箭头函数中的-this" class="headerlink" title="6.1 箭头函数中的 this"></a>6.1 箭头函数中的 <code>this</code></h2><blockquote><p><code>this</code> 指向定义箭头函数位置的上下文。</p></blockquote><p>箭头函数不会创建自己的执行上下文，而是将 <code>this</code> 指向外部函数已经创建的执行上下文。</p><p><img src="https://pic.rmb.bdstatic.com/bjh/025fbe0a4aea1826edbc55e3cee003a2.png" alt="8-1.png"></p><p>看一下例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">x, y</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.x = x;</span><br><span class="line">    <span class="built_in">this</span>.y = y;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">log</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span> === myPoint); <span class="comment">// =&gt; true</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span> === myPoint); <span class="comment">// =&gt; true</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.x + <span class="string">&quot;:&quot;</span> + <span class="built_in">this</span>.y); <span class="comment">// =&gt; &#x27;95:165&#x27;</span></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> myPoint = <span class="keyword">new</span> Point(<span class="number">95</span>, <span class="number">165</span>);</span><br><span class="line">myPoint.log();</span><br></pre></td></tr></table></figure><p><code>setTimeout()</code> 调用箭头函数的时候，它的 <code>this</code> 会指向外部的执行上下文，也就是 <code>myPoint</code>。</p><p>如果箭头函数是定义在顶级作用域内（也就是函数外），<code>this</code> 将指向浏览器的全局对象 <code>window</code>，严格模式下也是一样的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getContext = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span> === <span class="built_in">window</span>); <span class="comment">// =&gt; true</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(getContext() === <span class="built_in">window</span>); <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><p>箭头函数和 <code>bind</code> 函数一样，一旦确定了 <code>this</code> 指向就无法再改变了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> get = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span> === numbers); <span class="comment">// =&gt; true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span> === numbers); <span class="comment">// =&gt; true</span></span><br><span class="line">  get(); <span class="comment">// =&gt; [1, 2]</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Try to change arrow function context manually</span></span><br><span class="line">  get.call([<span class="number">0</span>]); <span class="comment">// =&gt; [1, 2]</span></span><br><span class="line">  get.apply([<span class="number">0</span>]); <span class="comment">// =&gt; [1, 2]</span></span><br><span class="line"></span><br><span class="line">  get.bind([<span class="number">0</span>])(); <span class="comment">// =&gt; [1, 2]</span></span><br><span class="line">&#125;.call(numbers));</span><br></pre></td></tr></table></figure><p>不论我们如何调用箭头函数，最终输出的依旧是最开始的绑定的 <code>[1, 2]</code>。</p><p>那构造函数可以改变 <code>this</code> 指向吗？不会的，调用箭头函数作为构造函数会抛出错误，<code>TypeError: get is not a constructor</code>。</p><h2 id="6-2-陷阱：用箭头函数作为一个对象方法"><a href="#6-2-陷阱：用箭头函数作为一个对象方法" class="headerlink" title="6.2 陷阱：用箭头函数作为一个对象方法"></a>6.2 陷阱：用箭头函数作为一个对象方法</h2><p>⚠️ 既然箭头函数这么简洁方便，你可能想将对象的一个方法来用箭头函数声明，<code>(param) =&gt; &#123;...&#125;</code> 来代替 <code>function(param) &#123;..&#125;</code>。</p><p>看一下下边的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Period</span>(<span class="params">hours, minutes</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.hours = hours;</span><br><span class="line">  <span class="built_in">this</span>.minutes = minutes;</span><br><span class="line">&#125;</span><br><span class="line">Period.prototype.format = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span> === <span class="built_in">window</span>); <span class="comment">// =&gt; true</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.hours + <span class="string">&quot; hours and &quot;</span> + <span class="built_in">this</span>.minutes + <span class="string">&quot; minutes&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> walkPeriod = <span class="keyword">new</span> Period(<span class="number">2</span>, <span class="number">30</span>);</span><br><span class="line">walkPeriod.format(); <span class="comment">// =&gt; &#x27;undefined hours and undefined minutes&#x27;</span></span><br></pre></td></tr></table></figure><p>因为 <code>format</code> 是一个箭头函数，所以它的 <code>this</code> 指向它定义地方的执行上下文，也就是这里的 <code>window</code>。</p><p>即使 <code>format</code> 是通过「方法调用」的形式 <code>walkPeriod.format()</code>，函数中的 <code>this</code> 依旧是指向最初定义时候的 <code>window</code> ，而不会改变成当前对象。</p><p>因此我们需要用 <code>function</code> 来定义函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Period</span>(<span class="params">hours, minutes</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.hours = hours;</span><br><span class="line">  <span class="built_in">this</span>.minutes = minutes;</span><br><span class="line">&#125;</span><br><span class="line">Period.prototype.format = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span> === walkPeriod); <span class="comment">// =&gt; true</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.hours + <span class="string">&quot; hours and &quot;</span> + <span class="built_in">this</span>.minutes + <span class="string">&quot; minutes&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> walkPeriod = <span class="keyword">new</span> Period(<span class="number">2</span>, <span class="number">30</span>);</span><br><span class="line">walkPeriod.format(); <span class="comment">// =&gt; &#x27;2 hours and 30 minutes&#x27;</span></span><br></pre></td></tr></table></figure><p><code>walkPeriod.format()</code> 属于第 <code>2</code> 节介绍「方法调用」类型，所以 <code>this</code> 会指向调用它的对象 <code>walkPeriod</code>，最终也会打印正确的结果。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过上边的分析，我们发现影响 <code>this</code> 指向的其实是函数的调用类型，因此从现在起不要再问自己：</p><blockquote><p>这个 <code>this</code> 是怎么得到的？</p></blockquote><p>而是问自己：</p><blockquote><p>这个函数是属于哪种调用类型？</p><p>「函数直接调用」？「方法调用」？「构造函数调用」？「间接调用」？</p></blockquote><p>如果是绑定函数就问自己：</p><blockquote><p>这个函数 <code>bind</code> 的时候传的什么参数？</p></blockquote><p>如果是箭头函数就问自己：</p><blockquote><p>箭头函数是在哪里定义的，它外部的执行上下文是什么？</p></blockquote><p>通过上边的思路，可以使你不再对 <code>this</code> 感到头疼！</p><p><a href="https://dmitripavlutin.com/gentle-explanation-of-this-in-javascript/">原文</a> - <a href="https://mp.weixin.qq.com/s/fc2DKRbAbCCrYw-48PHYBA">译文</a></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%89%8D%E7%AB%AF/">前端</category>
      
      
      <category domain="http://example.com/tags/JavaScript/">JavaScript</category>
      
      
      <comments>http://example.com/2021/11/30/JavaScript%E4%B8%ADthis%E6%8C%87%E5%90%91%E5%88%86%E6%9E%90/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JS笔试题</title>
      <link>http://example.com/2021/11/29/JS%E7%AC%94%E8%AF%95%E9%A2%98/</link>
      <guid>http://example.com/2021/11/29/JS%E7%AC%94%E8%AF%95%E9%A2%98/</guid>
      <pubDate>Mon, 29 Nov 2021 14:25:29 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;实现防抖函数-debounce&quot;&gt;&lt;a href=&quot;#实现防抖函数-debounce&quot; class=&quot;headerlink&quot; title=&quot;实现防抖函数(debounce)&quot;&gt;&lt;/a&gt;实现防抖函数(debounce)&lt;/h2&gt;&lt;p&gt;防抖函数原理:在事件被触发 n 秒后再执行回调，如果在这 n 秒内又被触发，则重新计时。&lt;/p&gt;
&lt;p&gt;那么与节流函数的区别直接看这个动画实现即可。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="实现防抖函数-debounce"><a href="#实现防抖函数-debounce" class="headerlink" title="实现防抖函数(debounce)"></a>实现防抖函数(debounce)</h2><p>防抖函数原理:在事件被触发 n 秒后再执行回调，如果在这 n 秒内又被触发，则重新计时。</p><p>那么与节流函数的区别直接看这个动画实现即可。</p><span id="more"></span><p><img src="https://ae01.alicdn.com/kf/H9348988a754f4ffcaa4c2eafabade0099.png" alt="debounce.gif"></p><p>手写简化版:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 防抖函数</span></span><br><span class="line"><span class="keyword">const</span> debounce = <span class="function">(<span class="params">fn, delay</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn.apply(<span class="built_in">this</span>, args);</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>适用场景:</p><ul><li>按钮提交场景:防止多次提交按钮，只执行最后提交的一次</li><li>服务端验证场景:表单验证需要服务端配合，只执行一段连续的输入事件的最后一次，还有搜索联想词功能类似</li></ul><p>生存环境请用 <a href="https://www.lodashjs.com/docs/lodash.debounce">lodash.debounce</a></p><h2 id="实现节流函数-throttle"><a href="#实现节流函数-throttle" class="headerlink" title="实现节流函数(throttle)"></a>实现节流函数(throttle)</h2><p>防抖函数原理:规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效。</p><p>// 手写简化版</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 节流函数</span></span><br><span class="line"><span class="keyword">const</span> throttle = <span class="function">(<span class="params">fn, delay = <span class="number">500</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!flag) <span class="keyword">return</span>;</span><br><span class="line">    flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn.apply(<span class="built_in">this</span>, args);</span><br><span class="line">      flag = <span class="literal">true</span>;</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>适用场景:</p><ul><li>拖拽场景:固定时间内只执行一次，防止超高频次触发位置变动</li><li>缩放场景:监控浏览器 resize</li><li>动画场景:避免短时间内多次触发动画引起性能问题</li></ul><h2 id="深克隆-deepclone"><a href="#深克隆-deepclone" class="headerlink" title="深克隆(deepclone)"></a>深克隆(deepclone)</h2><p>简单版:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newObj = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(oldObj));</span><br></pre></td></tr></table></figure><p>局限性:</p><ol><li>他无法实现对函数 、RegExp 等特殊对象的克隆</li><li>会抛弃对象的 constructor,所有的构造函数会指向 Object</li><li>对象有循环引用,会报错</li></ol><p>面试版:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * deep clone</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;[type]&#125;</span> </span>parent object 需要进行克隆的对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;[type]&#125;</span> </span>深克隆后的对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> clone = <span class="function">(<span class="params">parent</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 判断类型</span></span><br><span class="line">  <span class="keyword">const</span> isType = <span class="function">(<span class="params">obj, type</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&quot;object&quot;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">const</span> typeString = <span class="built_in">Object</span>.prototype.toString.call(obj);</span><br><span class="line">    <span class="keyword">let</span> flag;</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;Array&quot;</span>:</span><br><span class="line">        flag = typeString === <span class="string">&quot;[object Array]&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;Date&quot;</span>:</span><br><span class="line">        flag = typeString === <span class="string">&quot;[object Date]&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;RegExp&quot;</span>:</span><br><span class="line">        flag = typeString === <span class="string">&quot;[object RegExp]&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理正则</span></span><br><span class="line">  <span class="keyword">const</span> getRegExp = <span class="function">(<span class="params">re</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> flags = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (re.global) flags += <span class="string">&quot;g&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (re.ignoreCase) flags += <span class="string">&quot;i&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (re.multiline) flags += <span class="string">&quot;m&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> flags;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 维护两个储存循环引用的数组</span></span><br><span class="line">  <span class="keyword">const</span> parents = [];</span><br><span class="line">  <span class="keyword">const</span> children = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> _clone = <span class="function">(<span class="params">parent</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (parent === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> parent !== <span class="string">&quot;object&quot;</span>) <span class="keyword">return</span> parent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> child, proto;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isType(parent, <span class="string">&quot;Array&quot;</span>)) &#123;</span><br><span class="line">      <span class="comment">// 对数组做特殊处理</span></span><br><span class="line">      child = [];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isType(parent, <span class="string">&quot;RegExp&quot;</span>)) &#123;</span><br><span class="line">      <span class="comment">// 对正则对象做特殊处理</span></span><br><span class="line">      child = <span class="keyword">new</span> <span class="built_in">RegExp</span>(parent.source, getRegExp(parent));</span><br><span class="line">      <span class="keyword">if</span> (parent.lastIndex) child.lastIndex = parent.lastIndex;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isType(parent, <span class="string">&quot;Date&quot;</span>)) &#123;</span><br><span class="line">      <span class="comment">// 对Date对象做特殊处理</span></span><br><span class="line">      child = <span class="keyword">new</span> <span class="built_in">Date</span>(parent.getTime());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 处理对象原型</span></span><br><span class="line">      proto = <span class="built_in">Object</span>.getPrototypeOf(parent);</span><br><span class="line">      <span class="comment">// 利用Object.create切断原型链</span></span><br><span class="line">      child = <span class="built_in">Object</span>.create(proto);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理循环引用</span></span><br><span class="line">    <span class="keyword">const</span> index = parents.indexOf(parent);</span><br><span class="line">    <span class="keyword">if</span> (index != -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果父数组存在本对象,说明之前已经被引用过,直接返回此对象</span></span><br><span class="line">      <span class="keyword">return</span> children[index];</span><br><span class="line">    &#125;</span><br><span class="line">    parents.push(parent);</span><br><span class="line">    children.push(child);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> parent) &#123;</span><br><span class="line">      <span class="comment">// 递归</span></span><br><span class="line">      child[i] = _clone(parent[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> child;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> _clone(parent);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>局限性:</p><ol><li>一些特殊情况没有处理: 例如 Buffer 对象、Promise、Set、Map</li><li>另外对于确保没有循环引用的对象，我们可以省去对循环引用的特殊处理，因为这很消耗时间</li></ol><h2 id="实现-Event-event-bus"><a href="#实现-Event-event-bus" class="headerlink" title="实现 Event(event bus)"></a>实现 Event(event bus)</h2><p>event bus 既是 node 中各个模块的基石，又是前端组件通信的依赖手段之一，同时涉及了订阅-发布设计模式，是非常重要的基础。</p><p>简单版:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventEmitter</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>._events = <span class="built_in">this</span>._events || <span class="keyword">new</span> <span class="built_in">Map</span>(); <span class="comment">// 储存事件/回调键值对</span></span><br><span class="line">    <span class="built_in">this</span>._maxListeners = <span class="built_in">this</span>._maxListeners || <span class="number">10</span>; <span class="comment">// 设立监听上限</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 触发名为type的事件</span></span><br><span class="line">EventEmitter.prototype.emit = <span class="function"><span class="keyword">function</span> (<span class="params">type, ...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> handler;</span><br><span class="line">  <span class="comment">// 从储存事件键值对的this._events中获取对应事件回调函数</span></span><br><span class="line">  handler = <span class="built_in">this</span>._events.get(type);</span><br><span class="line">  <span class="keyword">if</span> (args.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    handler.apply(<span class="built_in">this</span>, args);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    handler.call(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听名为type的事件</span></span><br><span class="line">EventEmitter.prototype.addListener = <span class="function"><span class="keyword">function</span> (<span class="params">type, fn</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 将type事件以及对应的fn函数放入this._events中储存</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">this</span>._events.get(type)) &#123;</span><br><span class="line">    <span class="built_in">this</span>._events.set(type, fn);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>面试版:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventEmitter</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>._events = <span class="built_in">this</span>._events || <span class="keyword">new</span> <span class="built_in">Map</span>(); <span class="comment">// 储存事件/回调键值对</span></span><br><span class="line">    <span class="built_in">this</span>._maxListeners = <span class="built_in">this</span>._maxListeners || <span class="number">10</span>; <span class="comment">// 设立监听上限</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发名为type的事件</span></span><br><span class="line">EventEmitter.prototype.emit = <span class="function"><span class="keyword">function</span> (<span class="params">type, ...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> handler;</span><br><span class="line">  <span class="comment">// 从储存事件键值对的this._events中获取对应事件回调函数</span></span><br><span class="line">  handler = <span class="built_in">this</span>._events.get(type);</span><br><span class="line">  <span class="keyword">if</span> (args.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    handler.apply(<span class="built_in">this</span>, args);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    handler.call(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听名为type的事件</span></span><br><span class="line">EventEmitter.prototype.addListener = <span class="function"><span class="keyword">function</span> (<span class="params">type, fn</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 将type事件以及对应的fn函数放入this._events中储存</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">this</span>._events.get(type)) &#123;</span><br><span class="line">    <span class="built_in">this</span>._events.set(type, fn);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发名为type的事件</span></span><br><span class="line">EventEmitter.prototype.emit = <span class="function"><span class="keyword">function</span> (<span class="params">type, ...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> handler;</span><br><span class="line">  handler = <span class="built_in">this</span>._events.get(type);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(handler)) &#123;</span><br><span class="line">    <span class="comment">// 如果是一个数组说明有多个监听者,需要依次此触发里面的函数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; handler.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (args.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        handler[i].apply(<span class="built_in">this</span>, args);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        handler[i].call(<span class="built_in">this</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 单个函数的情况我们直接触发即可</span></span><br><span class="line">    <span class="keyword">if</span> (args.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      handler.apply(<span class="built_in">this</span>, args);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      handler.call(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听名为type的事件</span></span><br><span class="line">EventEmitter.prototype.addListener = <span class="function"><span class="keyword">function</span> (<span class="params">type, fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> handler = <span class="built_in">this</span>._events.get(type); <span class="comment">// 获取对应事件名称的函数清单</span></span><br><span class="line">  <span class="keyword">if</span> (!handler) &#123;</span><br><span class="line">    <span class="built_in">this</span>._events.set(type, fn);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (handler &amp;&amp; <span class="keyword">typeof</span> handler === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果handler是函数说明只有一个监听者</span></span><br><span class="line">    <span class="built_in">this</span>._events.set(type, [handler, fn]); <span class="comment">// 多个监听者我们需要用数组储存</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    handler.push(fn); <span class="comment">// 已经有多个监听者,那么直接往数组里push函数即可</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">EventEmitter.prototype.removeListener = <span class="function"><span class="keyword">function</span> (<span class="params">type, fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> handler = <span class="built_in">this</span>._events.get(type); <span class="comment">// 获取对应事件名称的函数清单</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果是函数,说明只被监听了一次</span></span><br><span class="line">  <span class="keyword">if</span> (handler &amp;&amp; <span class="keyword">typeof</span> handler === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>._events.delete(type, fn);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> position;</span><br><span class="line">    <span class="comment">// 如果handler是数组,说明被监听多次要找到对应的函数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; handler.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (handler[i] === fn) &#123;</span><br><span class="line">        position = i;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        position = -<span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果找到匹配的函数,从数组中清除</span></span><br><span class="line">    <span class="keyword">if</span> (position !== -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">// 找到数组对应的位置,直接清除此回调</span></span><br><span class="line">      handler.splice(position, <span class="number">1</span>);</span><br><span class="line">      <span class="comment">// 如果清除后只有一个函数,那么取消数组,以函数形式保存</span></span><br><span class="line">      <span class="keyword">if</span> (handler.length === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>._events.set(type, handler[<span class="number">0</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="实现-instanceOf"><a href="#实现-instanceOf" class="headerlink" title="实现 instanceOf"></a>实现 instanceOf</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟 instanceof</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">instance_of</span>(<span class="params">L, R</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//L 表示左表达式，R 表示右表达式</span></span><br><span class="line">  <span class="keyword">var</span> O = R.prototype; <span class="comment">// 取 R 的显示原型</span></span><br><span class="line">  L = L.__proto__; <span class="comment">// 取 L 的隐式原型</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (L === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (O === L)</span><br><span class="line">      <span class="comment">// 这里重点:当 O 严格等于 L 时，返回 true</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    L = L.__proto__;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模拟-new"><a href="#模拟-new" class="headerlink" title="模拟 new"></a>模拟 new</h2><p>new 操作符做了这些事:</p><ul><li>它创建了一个全新的对象</li><li>它会被执行[[Prototype]](也就是 proto)链接</li><li>它使 this 指向新创建的对象</li><li>通过 new 创建的每个对象将最终被[[Prototype]]链接到这个函数的 prototype 对象上</li><li>如果函数没有返回对象类型 Object(包含 Function, Array, Date, RegExg, Error)，那么 new 表达式中的函数调用将返 回该对象引用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// objectFactory(name, &#x27;cxk&#x27;, &#x27;18&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">objectFactory</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  <span class="keyword">const</span> Constructor = [].shift.call(<span class="built_in">arguments</span>);</span><br><span class="line"></span><br><span class="line">  obj.__proto__ = Constructor.prototype;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> ret = Constructor.apply(obj, <span class="built_in">arguments</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> ret === <span class="string">&quot;object&quot;</span> ? ret : obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现一个-call"><a href="#实现一个-call" class="headerlink" title="实现一个 call"></a>实现一个 call</h2><p>call 做了什么:</p><ul><li>将函数设为对象的属性</li><li>执行&amp;删除这个函数</li><li>指定 this 到函数并传入给定参数执行函数</li><li>如果不传入参数，默认指向为 window</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟 call bar.mycall(null);</span></span><br><span class="line"><span class="comment">// 实现一个call方法:</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 此处没有考虑context非object情况</span></span><br><span class="line">  context.fn = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">let</span> args = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>, len = <span class="built_in">arguments</span>.length; i &lt; len; i++) &#123;</span><br><span class="line">    args.push(<span class="built_in">arguments</span>[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  context.fn(...args);</span><br><span class="line">  <span class="keyword">let</span> result = context.fn(...args);</span><br><span class="line">  <span class="keyword">delete</span> context.fn;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="实现-apply-方法"><a href="#实现-apply-方法" class="headerlink" title="实现 apply 方法"></a>实现 apply 方法</h2><p>apply 原理与 call 很相似，不多赘述</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟 apply</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.myapply = <span class="function"><span class="keyword">function</span> (<span class="params">context, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> context = <span class="built_in">Object</span>(context) || <span class="built_in">window</span>;</span><br><span class="line">  context.fn = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">var</span> result;</span><br><span class="line">  <span class="keyword">if</span> (!arr) &#123;</span><br><span class="line">    result = context.fn();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> args = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line">      args.push(<span class="string">&quot;arr[&quot;</span> + i + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    result = <span class="built_in">eval</span>(<span class="string">&quot;context.fn(&quot;</span> + args + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span> context.fn;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="实现-bind"><a href="#实现-bind" class="headerlink" title="实现 bind"></a>实现 bind</h2><p>实现 bind 要做什么</p><ul><li>返回一个函数，绑定 this，传递预置参数</li><li>bind 返回的函数可以作为构造函数使用。故作为构造函数时应使得 this 失效，但是传入的参数依然有效</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mdn的实现</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">Function</span>.prototype.bind) &#123;</span><br><span class="line">  <span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span> (<span class="params">oThis</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">this</span> !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">      <span class="comment">// closest thing possible to the ECMAScript 5</span></span><br><span class="line">      <span class="comment">// internal IsCallable function</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(</span><br><span class="line">        <span class="string">&quot;Function.prototype.bind - what is trying to be bound is not callable&quot;</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> aArgs = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>),</span><br><span class="line">      fToBind = <span class="built_in">this</span>,</span><br><span class="line">      fNOP = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">      fBound = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// this instanceof fBound === true时,说明返回的fBound被当做new的构造函数调用</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;;</span><br><span class="line">    fToBind.apply(</span><br><span class="line">      <span class="built_in">this</span> <span class="keyword">instanceof</span> fBound ? <span class="built_in">this</span> : oThis,</span><br><span class="line">      <span class="comment">// 获取调用时(fBound)的传参.bind 返回的函数入参往往是这么传递的</span></span><br><span class="line">      aArgs.concat(<span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>))</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 维护原型关系</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.prototype) &#123;</span><br><span class="line">      <span class="comment">// Function.prototype doesn&#x27;t have a prototype property</span></span><br><span class="line">      fNOP.prototype = <span class="built_in">this</span>.prototype;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 下行的代码使fBound.prototype是fNOP的实例,因此</span></span><br><span class="line">    <span class="comment">// 返回的fBound若作为new的构造函数,new生成的新对象作为this传入fBound,新对象的__proto__就是fNOP的实例</span></span><br><span class="line">    fBound.prototype = <span class="keyword">new</span> fNOP();</span><br><span class="line">    <span class="keyword">return</span> fBound;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模拟-Object-create"><a href="#模拟-Object-create" class="headerlink" title="模拟 Object.create"></a>模拟 Object.create</h2><p>Object.create()方法创建一个新对象，使用现有的对象来提供新创建的对象的 proto。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟 Object.create</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">proto</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  F.prototype = proto;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现类的继承"><a href="#实现类的继承" class="headerlink" title="实现类的继承"></a>实现类的继承</h2><p>类的继承在几年前是重点内容，有 n 种继承方式各有优劣，es6 普及后越来越不重要，那么多种写法有点『回字有四样写 法』的意思，如果还想深入理解的去看红宝书即可，我们目前只实现一种最理想的继承方式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.parent = name;</span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.parent&#125;</span>: 你打篮球的样子像kunkun`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name, parent</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 将父类的构造函数绑定在子类上</span></span><br><span class="line">  Parent.call(<span class="built_in">this</span>, parent) <span class="built_in">this</span>.child = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">1. 这一步不用Child.prototype =Parent.prototype的原因是怕共享内存，修改父类原型对象就会影响子类</span></span><br><span class="line"><span class="comment">2. 不用Child.prototype = new Parent()的原因是会调用2次父类的构造方法(另一次是call)，会存在一份多余的父类实例属性</span></span><br><span class="line"><span class="comment">3. Object.create是创建了父类原型的副本，与父类原型完全隔离</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Child.prototype = <span class="built_in">Object</span>.create(Parent.prototype);</span><br><span class="line">Child.prototype.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.parent&#125;</span>好，我是练习时⻓两年半的<span class="subst">$&#123;<span class="built_in">this</span>.child&#125;</span>`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意记得把子类的构造指向子类本身</span></span><br><span class="line">Child.prototype.constructor = Child;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> parent = <span class="keyword">new</span> Parent(<span class="string">&quot;father&quot;</span>);</span><br><span class="line">parent.say(); <span class="comment">// father: 你打篮球的样子像kunkun</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> Child(<span class="string">&quot;cxk&quot;</span>, <span class="string">&quot;father&quot;</span>);</span><br><span class="line">child.say(); <span class="comment">// father好，我是练习时⻓两年半的cxk</span></span><br></pre></td></tr></table></figure><h2 id="实现-JSON-parse"><a href="#实现-JSON-parse" class="headerlink" title="实现 JSON.parse"></a>实现 JSON.parse</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> json = <span class="string">&#x27;&#123;&quot;name&quot;:&quot;cxk&quot;, &quot;age&quot;:25&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">eval</span>(<span class="string">&quot;(&quot;</span> + json + <span class="string">&quot;)&quot;</span>);</span><br></pre></td></tr></table></figure><p>此方法属于黑魔法，极易容易被 xss 攻击，还有一种 <code>new Function</code> 大同小异。<br>简单的教程看这个<a href="https://zhuanlan.zhihu.com/p/28049617">半小时实现一个 JSON 解析器</a></p><h2 id="实现-Promise"><a href="#实现-Promise" class="headerlink" title="实现 Promise"></a>实现 Promise</h2><blockquote><p>我很早之前实现过一版，而且注释很多，但是居然找不到了,这是在网络上找了一版带注释的，目测没有大问题，具体过程可以看这篇<a href="https://zhuanlan.zhihu.com/p/21834559">史上最易读懂的 Promise/A+ 完全实现</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> PromisePolyfill = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 和reject不同的是resolve需要尝试展开thenable对象</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">tryToResolve</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span> === value) &#123;</span><br><span class="line">      <span class="comment">// 主要是防止下面这种情况</span></span><br><span class="line">      <span class="comment">// let y = new Promise(res =&gt; setTimeout(res(y)))</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="built_in">TypeError</span>(<span class="string">&quot;Chaining cycle detected for promise!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据规范2.32以及2.33 对对象或者函数尝试展开</span></span><br><span class="line">    <span class="comment">// 保证S6之前的 polyfill 也能和ES6的原生promise混用</span></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      value !== <span class="literal">null</span> &amp;&amp;</span><br><span class="line">      (<span class="keyword">typeof</span> value === <span class="string">&quot;object&quot;</span> || <span class="keyword">typeof</span> value === <span class="string">&quot;function&quot;</span>)</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 这里记录这次then的值同时要被try包裹</span></span><br><span class="line">        <span class="comment">// 主要原因是 then 可能是一个getter, 也也就是说</span></span><br><span class="line">        <span class="comment">//   1. value.then可能报错</span></span><br><span class="line">        <span class="comment">//   2. value.then可能产生副作用(例如多次执行可能结果不同)</span></span><br><span class="line">        <span class="keyword">var</span> then = value.then;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 另一方面, 由于无法保证 then 确实会像预期的那样只调用一个onFulfilled / onRejected</span></span><br><span class="line">        <span class="comment">// 所以增加了一个flag来防止resolveOrReject被多次调用</span></span><br><span class="line">        <span class="keyword">var</span> thenAlreadyCalledOrThrow = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> then === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">          <span class="comment">// 是thenable 那么尝试展开</span></span><br><span class="line">          <span class="comment">// 并且在该thenable状态改变之前this对象的状态不变</span></span><br><span class="line">          then.bind(value)(</span><br><span class="line">            <span class="comment">// onFulfilled</span></span><br><span class="line">            <span class="function"><span class="keyword">function</span> (<span class="params">value2</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">if</span> (thenAlreadyCalledOrThrow) <span class="keyword">return</span>;</span><br><span class="line">              thenAlreadyCalledOrThrow = <span class="literal">true</span>;</span><br><span class="line">              tryToResolve.bind(<span class="built_in">this</span>, value2)();</span><br><span class="line">            &#125;.bind(<span class="built_in">this</span>),</span><br><span class="line"></span><br><span class="line">            <span class="comment">// onRejected</span></span><br><span class="line">            <span class="function"><span class="keyword">function</span> (<span class="params">reason2</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">if</span> (thenAlreadyCalledOrThrow) <span class="keyword">return</span>;</span><br><span class="line">              thenAlreadyCalledOrThrow = <span class="literal">true</span>;</span><br><span class="line">              resolveOrReject.bind(<span class="built_in">this</span>, <span class="string">&quot;rejected&quot;</span>, reason2)();</span><br><span class="line">            &#125;.bind(<span class="built_in">this</span>)</span><br><span class="line">          );</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 拥有then 但是then不是一个函数 所以也不是thenable</span></span><br><span class="line">          resolveOrReject.bind(<span class="built_in">this</span>, <span class="string">&quot;resolved&quot;</span>, value)();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="keyword">if</span> (thenAlreadyCalledOrThrow) <span class="keyword">return</span>;</span><br><span class="line">        thenAlreadyCalledOrThrow = <span class="literal">true</span>;</span><br><span class="line">        resolveOrReject.bind(<span class="built_in">this</span>, <span class="string">&quot;rejected&quot;</span>, e)();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 基本类型 直接返回</span></span><br><span class="line">      resolveOrReject.bind(<span class="built_in">this</span>, <span class="string">&quot;resolved&quot;</span>, value)();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resolveOrReject</span>(<span class="params">status, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.status !== <span class="string">&quot;pending&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">this</span>.status = status;</span><br><span class="line">    <span class="built_in">this</span>.data = data;</span><br><span class="line">    <span class="keyword">if</span> (status === <span class="string">&quot;resolved&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.resolveList.length; ++i) &#123;</span><br><span class="line">        <span class="built_in">this</span>.resolveList[i]();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.rejectList.length; ++i) &#123;</span><br><span class="line">        <span class="built_in">this</span>.rejectList[i]();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">executor</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(<span class="built_in">this</span> <span class="keyword">instanceof</span> <span class="built_in">Promise</span>)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">&quot;Promise can not be called without new !&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> executor !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">      <span class="comment">// 非标准 但与Chrome谷歌保持一致</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="built_in">TypeError</span>(<span class="string">&quot;Promise resolver &quot;</span> + executor + <span class="string">&quot; is not a function&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.status = <span class="string">&quot;pending&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.resolveList = [];</span><br><span class="line">    <span class="built_in">this</span>.rejectList = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      executor(tryToResolve.bind(<span class="built_in">this</span>), resolveOrReject.bind(<span class="built_in">this</span>, <span class="string">&quot;rejected&quot;</span>));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      resolveOrReject.bind(<span class="built_in">this</span>, <span class="string">&quot;rejected&quot;</span>, e)();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 返回值穿透以及错误穿透, 注意错误穿透用的是throw而不是return，否则的话</span></span><br><span class="line">    <span class="comment">// 这个then返回的promise状态将变成resolved即接下来的then中的onFulfilled</span></span><br><span class="line">    <span class="comment">// 会被调用, 然而我们想要调用的是onRejected</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> onFulfilled !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">      onFulfilled = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> onRejected !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">      onRejected = <span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> reason;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> executor = <span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 拿到对应的handle函数处理this.data</span></span><br><span class="line">            <span class="comment">// 并以此为依据解析这个新的Promise</span></span><br><span class="line">            <span class="keyword">var</span> value =</span><br><span class="line">              <span class="built_in">this</span>.status === <span class="string">&quot;resolved&quot;</span></span><br><span class="line">                ? onFulfilled(<span class="built_in">this</span>.data)</span><br><span class="line">                : onRejected(<span class="built_in">this</span>.data);</span><br><span class="line">            resolve(value);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            reject(e);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;.bind(<span class="built_in">this</span>)</span><br><span class="line">      );</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// then 接受两个函数返回一个新的Promise</span></span><br><span class="line">    <span class="comment">// then 自身的执行永远异步与onFulfilled/onRejected的执行</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.status !== <span class="string">&quot;pending&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(executor.bind(<span class="built_in">this</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// pending</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">this</span>.resolveList.push(executor.bind(<span class="built_in">this</span>, resolve, reject));</span><br><span class="line">          <span class="built_in">this</span>.rejectList.push(executor.bind(<span class="built_in">this</span>, resolve, reject));</span><br><span class="line">        &#125;.bind(<span class="built_in">this</span>)</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// for promise A+ test</span></span><br><span class="line">  <span class="built_in">Promise</span>.deferred = <span class="built_in">Promise</span>.defer = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dfd = &#123;&#125;;</span><br><span class="line">    dfd.promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">      dfd.resolve = resolve;</span><br><span class="line">      dfd.reject = reject;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> dfd;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// for promise A+ test</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">module</span> !== <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">    <span class="built_in">module</span>.exports = <span class="built_in">Promise</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">PromisePolyfill.all = <span class="function"><span class="keyword">function</span> (<span class="params">promises</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = [];</span><br><span class="line">    <span class="keyword">let</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.length; ++i) &#123;</span><br><span class="line">      promises[i].then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        result[i] = value;</span><br><span class="line">        <span class="keyword">if</span> (cnt === promises.length) resolve(result);</span><br><span class="line">      &#125;, reject);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">PromisePolyfill.race = <span class="function"><span class="keyword">function</span> (<span class="params">promises</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.length; ++i) &#123;</span><br><span class="line">      promises[i].then(resolve, reject);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%89%8D%E7%AB%AF/">前端</category>
      
      
      <category domain="http://example.com/tags/%E7%AC%94%E8%AF%95/">笔试</category>
      
      
      <comments>http://example.com/2021/11/29/JS%E7%AC%94%E8%AF%95%E9%A2%98/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>字符串类面试题</title>
      <link>http://example.com/2021/11/29/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
      <guid>http://example.com/2021/11/29/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E9%9D%A2%E8%AF%95%E9%A2%98/</guid>
      <pubDate>Mon, 29 Nov 2021 14:25:17 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;解析-URL-Params-为对象&quot;&gt;&lt;a href=&quot;#解析-URL-Params-为对象&quot; class=&quot;headerlink&quot; title=&quot;解析 URL Params 为对象&quot;&gt;&lt;/a&gt;解析 URL Params 为对象&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; url = &lt;span class=&quot;string&quot;&gt;&amp;#x27;http://www.domain.com/?user=anonymous&amp;amp;id=123&amp;amp;id=456&amp;amp;city=%E5%8C%97%E4%BA%AC&amp;amp;enabled&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;parseParam(url)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;  user: &amp;#x27;anonymous&amp;#x27;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;  id: [123, 456], // 重复出现的 key 要组装成数组，能被转成数字的就转成数字类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;  city: &amp;#x27;北京&amp;#x27;, // 中⽂需解码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;  enabled: true, // 未指定值得 key 约定为 true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="解析-URL-Params-为对象"><a href="#解析-URL-Params-为对象" class="headerlink" title="解析 URL Params 为对象"></a>解析 URL Params 为对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="string">&#x27;http://www.domain.com/?user=anonymous&amp;id=123&amp;id=456&amp;city=%E5%8C%97%E4%BA%AC&amp;enabled&#x27;</span>;</span><br><span class="line">parseParam(url)</span><br><span class="line"><span class="comment">/* 结果</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  user: &#x27;anonymous&#x27;,</span></span><br><span class="line"><span class="comment">  id: [123, 456], // 重复出现的 key 要组装成数组，能被转成数字的就转成数字类型</span></span><br><span class="line"><span class="comment">  city: &#x27;北京&#x27;, // 中⽂需解码</span></span><br><span class="line"><span class="comment">  enabled: true, // 未指定值得 key 约定为 true</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure> <span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseParam</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> paramsStr = <span class="regexp">/.+\?(.+)$/</span>.exec(url)[<span class="number">1</span>]; <span class="comment">// 将 ? 后⾯的字符串取出来</span></span><br><span class="line">  <span class="keyword">const</span> paramsArr = paramsStr.split(<span class="string">&quot;&amp;&quot;</span>); <span class="comment">// 将字符串以 &amp; 分割后存到数组中</span></span><br><span class="line">  <span class="keyword">let</span> paramsObj = &#123;&#125;;</span><br><span class="line">  <span class="comment">// 将 params 存到对象中</span></span><br><span class="line">  paramsArr.forEach(<span class="function">(<span class="params">param</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/=/</span>.test(param)) &#123;</span><br><span class="line">      <span class="comment">// 处理有 value 的参数</span></span><br><span class="line">      <span class="keyword">let</span> [key, val] = param.split(<span class="string">&quot;=&quot;</span>); <span class="comment">// 分割 key 和 value</span></span><br><span class="line">      val = <span class="built_in">decodeURIComponent</span>(val); <span class="comment">// 解码</span></span><br><span class="line">      val = <span class="regexp">/^\d+$/</span>.test(val) ? <span class="built_in">parseFloat</span>(val) : val; <span class="comment">// 判断是否转为数字</span></span><br><span class="line">      <span class="keyword">if</span> (paramsObj.hasOwnProperty(key)) &#123;</span><br><span class="line">        <span class="comment">// 如果对象有 key，则添加⼀个值</span></span><br><span class="line">        paramsObj[key] = [].concat(paramsObj[key], val);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果对象没有这个 key，创建 key 并设置值</span></span><br><span class="line">        paramsObj[key] = val;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 处理没有 value 的参数</span></span><br><span class="line">      paramsObj[param] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> paramsObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模板引擎实现"><a href="#模板引擎实现" class="headerlink" title="模板引擎实现"></a>模板引擎实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> template = <span class="string">&quot;我是&#123;&#123;name&#125;&#125;，年龄&#123;&#123;age&#125;&#125;，性别&#123;&#123;sex&#125;&#125;&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;姓名&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line">render(template, data); <span class="comment">// 我是姓名，年龄18，性别undefined</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">template, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> reg = <span class="regexp">/\&#123;\&#123;(\w+)\&#125;\&#125;/</span>; <span class="comment">// 模板字符串正则</span></span><br><span class="line">  <span class="keyword">if</span> (reg.test(template)) &#123;</span><br><span class="line">    <span class="comment">// 判断模板⾥是否有模板字符串</span></span><br><span class="line">    <span class="keyword">const</span> name = reg.exec(template)[<span class="number">1</span>]; <span class="comment">// 查找当前模板⾥第⼀个模板字符串的字段</span></span><br><span class="line">    template = template.replace(reg, data[name]); <span class="comment">// 将第⼀个模板字符串渲染</span></span><br><span class="line">    <span class="keyword">return</span> render(template, data); <span class="comment">// 递归的渲染并返回渲染后的结构</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> template; <span class="comment">// 如果模板没有模板字符串直接返回</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="转化为驼峰命名"><a href="#转化为驼峰命名" class="headerlink" title="转化为驼峰命名"></a>转化为驼峰命名</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s1 = <span class="string">&quot;get-element-by-id&quot;</span>;</span><br><span class="line"><span class="comment">// 转化为 getElementById</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transform</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> s.replace(<span class="regexp">/-\w/g</span>, <span class="function">(<span class="params">x</span>) =&gt;</span> x.slice(<span class="number">1</span>).toUpperCase());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查找字符串中出现最多的字符和个数"><a href="#查找字符串中出现最多的字符和个数" class="headerlink" title="查找字符串中出现最多的字符和个数"></a>查找字符串中出现最多的字符和个数</h2><p>例: abbcccddddd -&gt; 字符最多的是 d，出现了 5 次</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;abcabcabcbbccccc&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> char = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使其按照⼀定的次序排列</span></span><br><span class="line">str = str.split(<span class="string">&quot;&quot;</span>).sort().join(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="comment">// &quot;aaabbbbbcccccccc&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义正则表达式</span></span><br><span class="line"><span class="keyword">let</span> re = <span class="regexp">/(\w)\1+/g</span>;</span><br><span class="line">str.replace(re, <span class="function">(<span class="params">$<span class="number">0</span>, $<span class="number">1</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (num &lt; $<span class="number">0.</span>length) &#123;</span><br><span class="line">    num = $<span class="number">0.</span>length;</span><br><span class="line">    char = $<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`字符最多的是<span class="subst">$&#123;char&#125;</span>，出现了<span class="subst">$&#123;num&#125;</span>次`</span>);</span><br></pre></td></tr></table></figure><h2 id="字符串查找"><a href="#字符串查找" class="headerlink" title="字符串查找"></a>字符串查找</h2><p>请使⽤最基本的遍历来实现判断字符串 a 是否被包含在字符串 b 中，并返回第⼀次出现的位置（找不到返回 -1）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;34&quot;</span>;</span><br><span class="line">b = <span class="string">&quot;1234567&quot;</span>; <span class="comment">// 返回 2</span></span><br><span class="line">a = <span class="string">&quot;35&quot;</span>;</span><br><span class="line">b = <span class="string">&quot;1234567&quot;</span>; <span class="comment">// 返回 -1</span></span><br><span class="line">a = <span class="string">&quot;355&quot;</span>;</span><br><span class="line">b = <span class="string">&quot;12354355&quot;</span>; <span class="comment">// 返回 5</span></span><br><span class="line">isContain(a, b);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isContain</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> b) &#123;</span><br><span class="line">    <span class="keyword">if</span> (a[<span class="number">0</span>] === b[i]) &#123;</span><br><span class="line">      <span class="keyword">let</span> tmp = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j <span class="keyword">in</span> a) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[j] !== b[~~i + ~~j]) &#123;</span><br><span class="line">          tmp = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (tmp) &#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现千位分隔符"><a href="#实现千位分隔符" class="headerlink" title="实现千位分隔符"></a>实现千位分隔符</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保留三位小数</span></span><br><span class="line">parseToMoney(<span class="number">1234.56</span>); <span class="comment">// return &#x27;1,234.56&#x27;</span></span><br><span class="line">parseToMoney(<span class="number">123456789</span>); <span class="comment">// return &#x27;123,456,789&#x27;</span></span><br><span class="line">parseToMoney(<span class="number">1087654.321</span>); <span class="comment">// return &#x27;1,087,654.321&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseToMoney</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  num = <span class="built_in">parseFloat</span>(num.toFixed(<span class="number">3</span>));</span><br><span class="line">  <span class="keyword">let</span> [integer, decimal] = <span class="built_in">String</span>.prototype.split.call(num, <span class="string">&quot;.&quot;</span>);</span><br><span class="line">  integer = integer.replace(<span class="regexp">/\d(?=(\d&#123;3&#125;)+$)/g</span>, <span class="string">&quot;$&amp;,&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> integer + <span class="string">&quot;.&quot;</span> + (decimal ? decimal : <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正则表达式(运用了正则的前向声明和反前向声明):</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseToMoney</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 仅仅对位置进行匹配</span></span><br><span class="line">  <span class="keyword">let</span> re = <span class="regexp">/(?=(?!\b)(\d&#123;3&#125;)+$)/g</span>;</span><br><span class="line">  <span class="keyword">return</span> str.replace(re, <span class="string">&quot;,&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="判断是否是电话号码"><a href="#判断是否是电话号码" class="headerlink" title="判断是否是电话号码"></a>判断是否是电话号码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPhone</span>(<span class="params">tel</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/^1[34578]\d&#123;9&#125;$/</span>;</span><br><span class="line">  <span class="keyword">return</span> reg.test(tel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="验证是否是邮箱"><a href="#验证是否是邮箱" class="headerlink" title="验证是否是邮箱"></a>验证是否是邮箱</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEmail</span>(<span class="params">email</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/^([a-zA-Z0-9_\-])+@([a-zA-Z0-9_\-])+(\.[a-zA-Z0-9_\-])+$/</span>;</span><br><span class="line">  <span class="keyword">return</span> reg.test(email);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="验证是否是身份证"><a href="#验证是否是身份证" class="headerlink" title="验证是否是身份证"></a>验证是否是身份证</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isCardNo</span>(<span class="params">number</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/(^\d&#123;15&#125;$)|(^\d&#123;18&#125;$)|(^\d&#123;17&#125;(\d|X|x)$)/</span>;</span><br><span class="line">  <span class="keyword">return</span> reg.test(number);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%89%8D%E7%AB%AF/">前端</category>
      
      
      <category domain="http://example.com/tags/%E7%AC%94%E8%AF%95/">笔试</category>
      
      
      <comments>http://example.com/2021/11/29/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E9%9D%A2%E8%AF%95%E9%A2%98/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hello World</title>
      <link>http://example.com/2021/11/29/hello-world/</link>
      <guid>http://example.com/2021/11/29/hello-world/</guid>
      <pubDate>Mon, 29 Nov 2021 10:31:04 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</description>
        
      
      
      
      <content:encoded><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2021/11/29/hello-world/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
